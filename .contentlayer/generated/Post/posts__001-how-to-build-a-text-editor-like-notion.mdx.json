{
  "title": "How to Build a Text Editor Like Notion",
  "publishedAt": "2020-11-06T21:00:00.000Z",
  "summary": "Build your own Notion clone with React.js and learn how such text editors work.",
  "cover": {
    "src": "/images/posts/how-to-build-a-text-editor-like-notion/notion-clone-cover.png",
    "alt": "Notion Clone React",
    "caption": {
      "raw": "Slash commands are a building block in Notions text editor.",
      "html": "<p>Slash commands are a building block in Notions text editor.</p>"
    },
    "type": "Image",
    "_raw": {}
  },
  "externals": {
    "Medium": "https://medium.com/@konstantinmuenster/how-to-build-a-text-editor-like-notion-c510aedfdfcc",
    "type": "Externals",
    "_raw": {}
  },
  "category": "Engineering",
  "tags": [
    "Contenteditable",
    "Text Editor",
    "Rich Editor",
    "Notion",
    "Block Editor",
    "React.js",
    "Clone"
  ],
  "body": {
    "raw": "\nWithout a doubt, [Notion.so](https://www.notion.so/) is one of my favorite apps when it comes to organizing notes. I love their minimal designed text editor because it focuses your attention on the content — and not on unnecessary UI elements.\n\nYet it provides you a ton of powerful features that lead to a better writing experience.\n\nFor instance, the slash command is one of those features that really enhanced my writing flow. It allows you to add and style content without leaving the keyboard. Instead of clicking a UI button to add a new heading, you can just type `/h1`, hit ‘Enter’, and there you go.\n\nAnother cool thing about Notion is that it is a fully web-based application. Because of that, I was interested in how it was actually built — especially the text editor. In fact, I realized that it is not that difficult as I expected it to be.\n\nIn this article, we take a closer look at how a text editor like Notion works and how we can build one ourselves with React.js.\n\nBy doing this, we will discover and learn some essential frontend skills:\n\n- Working with the **DOM** and its **Nodes**\n- Working with **Event Listeners**\n- Advanced **State Management**\n\nHere is how our application will look like in the end. In my opinion, a perfect project for your portfolio if you are new to React.\n\n<Image\n  src=\"/images/posts/how-to-build-a-text-editor-like-notion/notion-clone-medium-short.gif\"\n  alt=\"Notion Clone React\"\n  caption=\"The final application!\"\n/>\n\n## Contents\n\n1.  The **Theory**: How Does A Notion-like Text Editor Work?\n2.  The **Practice**: How Can We Rebuild It?\n3.  **Ideas** For Further Development\n4.  **Resources**\n\n### The Theory: How Does A Notion-like Text Editor Work?\n\n#### Editable Blocks\n\nThe core concept of a Notion-like text editor is what I would like to call _blocks_. Each time you hit ‘Enter’ on your keyboard, you create a new block. So essentially, each page consists of one or many blocks.\n\nFrom a user perspective, a block contains content and has a specific styling that is associated with the block type. Types of blocks could be headings, quotes, or paragraphs. Each of those has a unique styling.\n\nFrom a technical perspective, a block is a so-called `contenteditable` element. Nearly every HTML element can be turned into an editable one. You just have to add the `contenteditable=\"true\"` attribute to it. This indicates if the element should be editable by the user. If so, users can edit their content directly in the HTML document as if it would be an `input` or `textarea` element.\n\nThe concept gets clear in an example:\n\nLet’s say a user adds a new block with the type of _Heading_. This produces the following HTML output:\n\n```jsx\n<h1 contenteditable=\"true\"> I am editable by the user </h1>\n```\n\nSince the user selected _Heading_ as the block type, we append an `h1` element to the DOM. Thus, it gets an appropriate heading styling. The user could now directly edit the content of that `h1` element by placing the cursor inside it.\n\n#### Slash Commands\n\nNow that the user can add new blocks to the page by pressing ‘Enter’, how can he/she determine the type of an added block?\n\nIn Notion, you can do this via slash commands.\n\nThe concept of slash commands is simple yet effective. Every time you type a `/` inside a block, a type-ahead menu pops up right above the cursor. This menu shows you all available block types. As you write along, you filter the block types with your query. If you found the right block type, just hit ‘Enter’, and the block turns into whatever you selected.\n\nIn our application, all slash commands will be equivalent to the corresponding HTML elements. Meaning an `/h1` command turns into an H1 heading and a `/p` command turns into a paragraph, for example.\n\nTechnically, an existing block like `<h1 contenteditable=\"true\"> </h1>` would consequently turn into `<p contenteditable=\"true\"> </p>` once the user types `/p` and hits ‘ Enter’.\n\n### The Practice: How Can We Rebuild It?\n\nNow that we know how it works in theory, let’s put it into practice. First of all, we create a new React project. You can do that by using create-react-app or any other tooling.\n\n#### 1 —Create An Editable Page\n\nHaving the setup done, we create our first component: `editablePage.js`\n\n```jsx:editablePage.js\n\nconst initialBlock = { id: uid(), html: '', tag: 'p' };\n\nclass EditablePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { blocks: [initialBlock] };\n  }\n\n  render() {\n    return (\n      <div className=\"Page\">\n        {this.state.blocks.map((block, key) => {\n          return (\n            <div key={key} id={block.id}>\n              Tag: {block.tag}, Content: {block.html}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default EditablePage;\n```\n\nThe page component stores and renders all blocks we will create later on. As a start, we only provide an initial first block that we define at the very top. This block will turn into an empty paragraph element once we created our editable block component. For now, we just render a plain `div` container.\n\nNote: Since every block needs a unique ID, I created a helper function `uid()` that we can use for initializing new blocks. In case you want to use the same function:\n\n```js:uid.js\nconst uid = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\n```\n\n#### 2 — Create An Editable Block\n\nAs a next step, we create an editable block component that we can render instead of the `div` container. For that, we have to install an external dependency called `react-contenteditable`.\n\n_React-Contenteditable_ is a package that makes working with editable elements in React really easy. It abstracts a lot of complexity for us so that we only need to pass the right props to the `ContentEditable` component. The component exposed by the package then handles the rest.\n\nTo install the package, run `npm i react-contenteditable`\n\nNext, we create a new file called `editableBlock.js`:\n\n```jsx:editableBlock.js\nclass EditableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.contentEditable = React.createRef();\n    this.state = {\n      html: '',\n      tag: 'p',\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ html: this.props.html, tag: this.props.tag });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const htmlChanged = prevState.html !== this.state.html;\n    const tagChanged = prevState.tag !== this.state.tag;\n    if (htmlChanged || tagChanged) {\n      this.props.updatePage({\n        id: this.props.id,\n        html: this.state.html,\n        tag: this.state.tag,\n      });\n    }\n  }\n\n  onChangeHandler(e) {\n    this.setState({ html: e.target.value });\n  }\n\n  render() {\n    return (\n      <ContentEditable\n        className=\"Block\"\n        innerRef={this.contentEditable}\n        html={this.state.html}\n        tagName={this.state.tag}\n        onChange={this.onChangeHandler}\n      />\n    );\n  }\n}\n\nexport default EditableBlock;\n```\n\nThe editable block renders the `ContentEditable` component that we imported from the `react-contenteditable` package. By passing `html` and `tagName` as props to the component, we can define what should be displayed and how it should be displayed. Remember, the `tagName` defines the HTML element type and hence the styling.\n\nIf we were to change the block type later on (e.g. from `p` to `h1`), we can simply update the `tagName` prop. Pretty easy, right?\n\nWe also added advanced state management to the block component. When the component mounts, it receives the initial HTML content and tag via props and stores them in the state. From now on, the block component fully owns the draft state. Any subsequent changes to the `html` or `tagName` prop are being ignored.\n\nWhen there have been relevant updates to the `html` or `tagName` state property, we update the page component’s state in the `componentDidUpdate` lifecycle hook too. Thus, we avoid an unnecessary re-rendering of the page.\n\nHaving our `editableBlock` component set up, we can finally use it in our page component:\n\n```jsx:editablePage.js\nconst initialBlock = { id: uid(), html: '', tag: 'p' };\n\nclass EditablePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updatePageHandler = this.updatePageHandler.bind(this);\n    this.addBlockHandler = this.addBlockHandler.bind(this);\n    this.deleteBlockHandler = this.deleteBlockHandler.bind(this);\n    this.state = { blocks: [initialBlock] };\n  }\n\n  updatePageHandler(updatedBlock) {\n    const blocks = this.state.blocks;\n    const index = blocks.map(b => b.id).indexOf(updatedBlock.id);\n    const updatedBlocks = [...blocks];\n    updatedBlocks[index] = {\n      ...updatedBlocks[index],\n      tag: updatedBlock.tag,\n      html: updatedBlock.html,\n    };\n    this.setState({ blocks: updatedBlocks });\n  }\n\n  addBlockHandler(currentBlock) {\n    const newBlock = { id: uid(), html: '', tag: 'p' };\n    const blocks = this.state.blocks;\n    const index = blocks.map(b => b.id).indexOf(currentBlock.id);\n    const updatedBlocks = [...blocks];\n    updatedBlocks.splice(index + 1, 0, newBlock);\n    this.setState({ blocks: updatedBlocks }, () => {\n      currentBlock.ref.nextElementSibling.focus();\n    });\n  }\n\n  deleteBlockHandler(currentBlock) {\n    const previousBlock = currentBlock.ref.previousElementSibling;\n    if (previousBlock) {\n      const blocks = this.state.blocks;\n      const index = blocks.map(b => b.id).indexOf(currentBlock.id);\n      const updatedBlocks = [...blocks];\n      updatedBlocks.splice(index, 1);\n      this.setState({ blocks: updatedBlocks }, () => {\n        setCaretToEnd(previousBlock);\n        previousBlock.focus();\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Page\">\n        {this.state.blocks.map((block, key) => {\n          return (\n            <EditableBlock\n              key={key}\n              id={block.id}\n              tag={block.tag}\n              html={block.html}\n              updatePage={this.updatePageHandler}\n              addBlock={this.addBlockHandler}\n              deleteBlock={this.deleteBlockHandler}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default EditablePage;\n```\n\nBesides using the `EditableBlock` component inside our `render` hook, we additionally added new methods in the page component:\n\n- The `updateBlockHandler` that we already use in our block component takes care of keeping the page and block state in sync.\n- The `addBlockHandler` appends a new block and sets the focus to it.\n- The `deleteBlockHandler` removes a block and sets the focus to the preceding block.\n\nWe pass all three methods as props to the editable block.\n\nNote: In the `deleteBlockHandler`, we use another helper function that manually sets the cursor to the end of the block content. If we would just focus the element as we did in `addBlockHandler`, it would focus the element though, but with a cursor set to the very beginning of the block content. In case you want to use the same `setCaretToEnd` helper function:\n\n```js:setCaretToEnd.js\nconst setCaretToEnd = element => {\n  const range = document.createRange();\n  const selection = window.getSelection();\n  range.selectNodeContents(element);\n  range.collapse(false);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  element.focus();\n};\n```\n\n#### 3 — Implement A KeyDown Listener\n\nSo far, we can only add text content to our initially added block. Let’s make things a bit more interactive with our first event listener. This will allow us to add and delete blocks as we like.\n\nInside `editableBlock.js`, we create an `onKeyDownHandler` method that we pass on to the `ContentEditable` component:\n\n```jsx:editableBlock.js\nclass EditableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    // ...\n    this.onKeyDownHandler = this.onKeyDownHandler.bind(this);\n    this.contentEditable = React.createRef();\n    this.state = {\n      htmlBackup: null,\n      html: '',\n      tag: 'p',\n      previousKey: '',\n    };\n  }\n\n  // ...\n\n  onKeyDownHandler(e) {\n    if (e.key === '/') {\n      this.setState({ htmlBackup: this.state.html });\n    }\n    if (e.key === 'Enter') {\n      if (this.state.previousKey !== 'Shift') {\n        e.preventDefault();\n        this.props.addBlock({\n          id: this.props.id,\n          ref: this.contentEditable.current,\n        });\n      }\n    }\n    if (e.key === 'Backspace' && !this.state.html) {\n      e.preventDefault();\n      this.props.deleteBlock({\n        id: this.props.id,\n        ref: this.contentEditable.current,\n      });\n    }\n    this.setState({ previousKey: e.key });\n  }\n\n  render() {\n    return (\n      <ContentEditable\n        className=\"Block\"\n        innerRef={this.contentEditable}\n        html={this.state.html}\n        tagName={this.state.tag}\n        onChange={this.onChangeHandler}\n        onKeyDown={this.onKeyDownHandler}\n      />\n    );\n  }\n}\n\nexport default EditableBlock;\n```\n\nAs mentioned, this event listener is primarily responsible for adding and deleting blocks. But let’s break the `onKeyDownHandler` down bit by bit:\n\n- Regardless of what key has been pressed, store the key in the state. We need the `previousKey` to be able to detect key combinations.\n- When the user pressed `/`, we store a copy of the current HTML content in the state. We do that because we want to restore a clean HTML version after the user has finished the process of selecting a block type.\n- When the user pressed `Enter`, we prevent the default behavior (i.e. adding a new line). Instead, we create a new block by using the `addBlock` method which we previously created in the page component.\n- Because the user should still be able to add new lines somehow, we use the `previousKey` state property to detect a `Shift+Enter` key combination. If that is the case, we do not add a new block and allow the default ‘Enter’ behavior to happen.\n- Lastly, we delete an empty block when the user presses `Backspace` with the `deleteBlock` method.\n\n<Image\n  src=\"/images/posts/how-to-build-a-text-editor-like-notion/1__FwMgJ660ehUK1SZgYLYjMA.gif\"\n  alt=\"Notion Clone React\"\n  caption=\"So far, we can create and delete blocks.\"\n/>\n\nNow that we can create new blocks, what about slash commands and selecting different block types? We cover that in the next steps.\n\n#### 4 — Add A Select Menu\n\nAs mentioned earlier, when the user types a `/`, we want to display a select menu. The menu shall list up all available block types. A specific block type can then be selected either by clicking on it or by typing in the matching slash command.\n\nTo implement such a select menu, we first have to add another dependency: _match-sorter_. This is a simple package that helps us with querying the matching block types.\n\nTo install it, run: `npm i match-sorter`\n\nHaving that done, we create a new file called `selectMenu.js` with the following contents:\n\n```jsx:selectMenu.js\nconst MENU_HEIGHT = 150;\nconst allowedTags = [\n  {\n    id: 'page-title',\n    tag: 'h1',\n    label: 'Page Title',\n  },\n  {\n    id: 'heading',\n    tag: 'h2',\n    label: 'Heading',\n  },\n  {\n    id: 'subheading',\n    tag: 'h3',\n    label: 'Subheading',\n  },\n  {\n    id: 'paragraph',\n    tag: 'p',\n    label: 'Paragraph',\n  },\n];\n\nclass SelectMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.keyDownHandler = this.keyDownHandler.bind(this);\n    this.state = {\n      command: '',\n      items: allowedTags,\n      selectedItem: 0,\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.keyDownHandler);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const command = this.state.command;\n    if (prevState.command !== command) {\n      const items = matchSorter(allowedTags, command, { keys: ['tag'] });\n      this.setState({ items: items });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.keyDownHandler);\n  }\n\n  keyDownHandler(e) {\n    const items = this.state.items;\n    const selected = this.state.selectedItem;\n    const command = this.state.command;\n\n    switch (e.key) {\n      case 'Enter':\n        e.preventDefault();\n        this.props.onSelect(items[selected].tag);\n        break;\n      case 'Backspace':\n        if (!command) this.props.close();\n        this.setState({ command: command.substring(0, command.length - 1) });\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        const prevSelected = selected === 0 ? items.length - 1 : selected - 1;\n        this.setState({ selectedItem: prevSelected });\n        break;\n      case 'ArrowDown':\n      case 'Tab':\n        e.preventDefault();\n        const nextSelected = selected === items.length - 1 ? 0 : selected + 1;\n        this.setState({ selectedItem: nextSelected });\n        break;\n      default:\n        this.setState({ command: this.state.command + e.key });\n        break;\n    }\n  }\n\n  render() {\n    const x = this.props.position.x;\n    const y = this.props.position.y - MENU_HEIGHT;\n    const positionAttributes = { top: y, left: x };\n\n    return (\n      <div className=\"SelectMenu\" style={positionAttributes}>\n        <div className=\"Items\">\n          {this.state.items.map((item, key) => {\n            const selectedItem = this.state.selectedItem;\n            const isSelected = this.state.items.indexOf(item) === selectedItem;\n            return (\n              <div\n                className={isSelected ? 'Selected' : null}\n                key={key}\n                role=\"button\"\n                tabIndex=\"0\"\n                onClick={() => this.props.onSelect(item.tag)}\n              >\n                {item.label}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SelectMenu;\n```\n\nAt the very top, we define what block types should be selectable by the user. Each type has a tag and a label: the tag defines which HTML element type shall be used and the label defines the display name inside our menu.\n\nWhen the component mounts, we calculate the position of the menu on the screen inside our `render` hook. There, we use `this.props.position`. This object contains the current position of the cursor since we want to display the menu right above it.\n\nAdditionally, we attach a `keyDown` event listener in the `componentDidMount` hook. It takes care of storing the entered command in state and enables the user to select a block type via keyboard.\n\nWhenever the `command` state property changes, we run our imported `matchedSorter` function to filter for matching block types. Thus, the select menu shows only block types that match with our command.\n\nFinally, when the user hits ‘Enter’ or clicks on an entry, we execute an `onSelect` method that we receive via props.\n\nAdmittedly, this was a lot of code at once. But if you go through it step by step, it should be understandable hopefully.\n\n#### 5 — Add Block Type Selection\n\nNext, we can put things together. Since we have our select menu component in place, we can add it to `editableBlock.js`:\n\n```jsx:editableBlock.js\nclass EditableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    // ...\n    this.onKeyUpHandler = this.onKeyUpHandler.bind(this);\n    this.openSelectMenuHandler = this.openSelectMenuHandler.bind(this);\n    this.closeSelectMenuHandler = this.closeSelectMenuHandler.bind(this);\n    this.tagSelectionHandler = this.tagSelectionHandler.bind(this);\n    this.contentEditable = React.createRef();\n    this.state = {\n      htmlBackup: null,\n      html: '',\n      tag: 'p',\n      previousKey: '',\n      selectMenuIsOpen: false,\n      selectMenuPosition: {\n        x: null,\n        y: null,\n      },\n    };\n  }\n\n  // ...\n\n  onKeyUpHandler(e) {\n    if (e.key === '/') {\n      this.openSelectMenuHandler();\n    }\n  }\n\n  openSelectMenuHandler() {\n    const { x, y } = getCaretCoordinates();\n    this.setState({\n      selectMenuIsOpen: true,\n      selectMenuPosition: { x, y },\n    });\n    document.addEventListener('click', this.closeSelectMenuHandler);\n  }\n\n  closeSelectMenuHandler() {\n    this.setState({\n      htmlBackup: null,\n      selectMenuIsOpen: false,\n      selectMenuPosition: { x: null, y: null },\n    });\n    document.removeEventListener('click', this.closeSelectMenuHandler);\n  }\n\n  tagSelectionHandler(tag) {\n    this.setState({ tag: tag, html: this.state.htmlBackup }, () => {\n      setCaretToEnd(this.contentEditable.current);\n      this.closeSelectMenuHandler();\n    });\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.selectMenuIsOpen && (\n          <SelectMenu\n            position={this.state.selectMenuPosition}\n            onSelect={this.tagSelectionHandler}\n            close={this.closeSelectMenuHandler}\n          />\n        )}\n        <ContentEditable\n          className=\"Block\"\n          innerRef={this.contentEditable}\n          html={this.state.html}\n          tagName={this.state.tag}\n          onChange={this.onChangeHandler}\n          onKeyDown={this.onKeyDownHandler}\n          onKeyUp={this.onKeyUpHandler}\n        />\n      </>\n    );\n  }\n}\n\nexport default EditableBlock;\n```\n\nFirst, we import our `SelectMenu` component and render it conditionally. We can control its visibility by our state property `selectMenuIsOpen`. If we set this to true, we render the menu additionally to the `ContentEditable` component.\n\nNext, we implemented the logic that defines when and where we want to show it.\n\nWe defined two methods that handle the menu’s opening and closing. When we open it, we first get the coordinates of the currently set cursor. We do this because we want to open up the menu right above the cursor. Lastly, we store this position in the state, set `selectMenuIsOpen` to true, and attach a click listener.\n\nThe click listener is responsible for closing the select menu once there has been another click on the screen — no matter if it was on the menu itself or outside it. Both actions should close it.\n\nOur `closeSelectMenuHandler` method then is fairly simple. We just reset our previously set state properties and detach the click listener again.\n\nHaving the opening and closing handlers implemented, we also need to define when we actually want to open the menu.\n\nFrom a user perspective, we want to open the menu once the user enters a `/`. Therefore, it seems intuitive to add the `this.openSelectMenuHandler()` call in our previously defined `onKeyDownHandler` method, right? Because there, we already check if the user pressed the `/` key.\n\nIn fact, we have to add another event listener for that. The menu should only show up once the user releases the `/` key. Otherwise, the positioning of the menu would not work correctly. Hence, we add a new `keyUp` event listener for that.\n\nNow there is only one final step to take. Remember that we pass an `onSelect` function as a prop to the select menu component? To make the selection process work, we have to define an associated method for that in our editable block component.\n\nGladly, this method is rather simple. In the `tagSelectionHandler`, we receive the selected block type as the `tag` argument. With it, we can update our `tagName` state property as well as restore the HTML backup, i.e. the HTML content without the entered command.\n\nIf that process has finished, we set the cursor to the editable block again and close the menu.\n\nAnd finally, believe it or not… we are done 🎉\n\nNote: I again used a helper function for obtaining the cursor coordinates. If you want to use the same function, here it is:\n\n```js\nconst getCaretCoordinates = () => {\n  let x, y;\n  const selection = window.getSelection();\n  if (selection.rangeCount !== 0) {\n    const range = selection.getRangeAt(0).cloneRange();\n    range.collapse(false);\n    const rect = range.getClientRects()[0];\n    if (rect) {\n      x = rect.left;\n      y = rect.top;\n    }\n  }\n  return { x, y };\n};\n```\n\n### **Ideas** For Further Development\n\nNow that we have the core functionality of Notion’s text editor rebuilt, we have a perfect foundation for further development. There are many features that we can add to our application to improve it further.\n\nI always like to look for inspiration in existing apps and see if I can build their features on my own. Same with Notion. Here are two concrete examples:\n\n#### Context Menu Based On Selection\n\nSo far, we only show a select menu when the user types a `/`. But what if the user wants to quickly edit the type of an existing block? Or he/she wants to remove a block?\n\n<Image\n  src=\"/images/posts/how-to-build-a-text-editor-like-notion/1__CsyyrDAk1vei6qrGVZtGSA.png\"\n  alt=\"Notion Clone React Context Menu\"\n  caption=\"Context Menu that will pop up once the user selects content\"\n/>\n\nHere, a context menu comes in handy. Whenever the user selects the block’s content, we display a menu with two options: either turn the existing block’s type into another or delete the block itself with a single click.\n\n#### Rearrange Blocks By Drag and Drop\n\nBecause we have an underlying block structure, we can rearrange our content fairly easily. Maybe a user realizes that this one paragraph should be further at the top of the page. In Notion, you can easily reorder blocks with a smooth drag and drop functionality. And we can do that too!\n\n<Image\n  src=\"/images/posts/how-to-build-a-text-editor-like-notion/1__gg4NH3JJRtioqNutwJf__DQ.gif\"\n  alt=\"Notion Clone React Drag Drop\"\n  caption=\"Drag And Drop functionality to reorder blocks\"\n/>\n\n### Resources\n\nAdmittedly, we covered a lot in this article… but I think the idea and process of building a Notion clone are really cool and exciting, especially for React beginners. Therefore, I wanted to provide you all the things you need.\n\n#### Final Application\n\nYou find a working example for the [final application on CodeSandbox](https://codesandbox.io/s/notion-text-editor-gugcc). It also includes all of the CSS stylings which we did not cover in this article.\n\n#### Advanced Application\n\nMoreover, if you want to enhance your application with more features (e.g. features like those I mentioned in the last section), have a look at my more advanced application. It might be a good source of inspiration too.\n\nThis advanced Notion Clone also includes a backend part that persists the user content on a server. Great if you want to get in touch with basic CRUD operations in Node/Express!\n\nLive Demo: [https://notion-clone.kmuenster.com/](https://notion-clone.kmuenster.com/)\n\nGithub Repository: [https://github.com/konstantinmuenster/notion-clone](https://github.com/konstantinmuenster/notion-clone)\n\n#### Working With The Cursor In The Browser\n\nAs you noticed, I used some helper functions in our application. These functions primarily help us to work with the cursor in the browser, e.g. obtaining the cursor coordinates.\n\nSince this was something I struggled with a lot during development, I recently published an article about it. In case you want to dive deeper into this topic, here it is:\n\n[How To Find The Caret Inside A Contenteditable Element](https://medium.com/javascript-in-plain-english/how-to-find-the-caret-inside-a-contenteditable-element-955a5ad9bf81)\n\nAs always, thanks for reading! If you stumbled with any questions or issues throughout this article, let me know in the comment section. Thus, I can update and improve the article if needed. I appreciate any feedback!\n",
    "code": "var Component=(()=>{var an=Object.create;var H=Object.defineProperty;var cn=Object.getOwnPropertyDescriptor;var un=Object.getOwnPropertyNames;var mn=Object.getPrototypeOf,fn=Object.prototype.hasOwnProperty;var V=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),bn=(a,e)=>{for(var f in e)H(a,f,{get:e[f],enumerable:!0})},xe=(a,e,f,g)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let N of un(e))!fn.call(a,N)&&N!==f&&H(a,N,{get:()=>e[N],enumerable:!(g=cn(e,N))||g.enumerable});return a};var hn=(a,e,f)=>(f=a!=null?an(mn(a)):{},xe(e||!a||!a.__esModule?H(f,\"default\",{value:a,enumerable:!0}):f,a)),pn=a=>xe(H({},\"__esModule\",{value:!0}),a);var we=V((wn,ye)=>{ye.exports=React});var ke=V(q=>{\"use strict\";(function(){\"use strict\";var a=we(),e=Symbol.for(\"react.element\"),f=Symbol.for(\"react.portal\"),g=Symbol.for(\"react.fragment\"),N=Symbol.for(\"react.strict_mode\"),G=Symbol.for(\"react.profiler\"),z=Symbol.for(\"react.provider\"),J=Symbol.for(\"react.context\"),E=Symbol.for(\"react.forward_ref\"),j=Symbol.for(\"react.suspense\"),P=Symbol.for(\"react.suspense_list\"),T=Symbol.for(\"react.memo\"),M=Symbol.for(\"react.lazy\"),Te=Symbol.for(\"react.offscreen\"),X=Symbol.iterator,Se=\"@@iterator\";function Re(t){if(t===null||typeof t!=\"object\")return null;var l=X&&t[X]||t[Se];return typeof l==\"function\"?l:null}var y=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function b(t){{for(var l=arguments.length,r=new Array(l>1?l-1:0),o=1;o<l;o++)r[o-1]=arguments[o];Ce(\"error\",t,r)}}function Ce(t,l,r){{var o=y.ReactDebugCurrentFrame,s=o.getStackAddendum();s!==\"\"&&(l+=\"%s\",r=r.concat([s]));var c=r.map(function(d){return String(d)});c.unshift(\"Warning: \"+l),Function.prototype.apply.call(console[t],console,c)}}var Ie=!1,Be=!1,He=!1,je=!1,Pe=!1,Z;Z=Symbol.for(\"react.module.reference\");function Me(t){return!!(typeof t==\"string\"||typeof t==\"function\"||t===g||t===G||Pe||t===N||t===j||t===P||je||t===Te||Ie||Be||He||typeof t==\"object\"&&t!==null&&(t.$$typeof===M||t.$$typeof===T||t.$$typeof===z||t.$$typeof===J||t.$$typeof===E||t.$$typeof===Z||t.getModuleId!==void 0))}function Oe(t,l,r){var o=t.displayName;if(o)return o;var s=l.displayName||l.name||\"\";return s!==\"\"?r+\"(\"+s+\")\":r}function Q(t){return t.displayName||\"Context\"}function _(t){if(t==null)return null;if(typeof t.tag==\"number\"&&b(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"),typeof t==\"function\")return t.displayName||t.name||null;if(typeof t==\"string\")return t;switch(t){case g:return\"Fragment\";case f:return\"Portal\";case G:return\"Profiler\";case N:return\"StrictMode\";case j:return\"Suspense\";case P:return\"SuspenseList\"}if(typeof t==\"object\")switch(t.$$typeof){case J:var l=t;return Q(l)+\".Consumer\";case z:var r=t;return Q(r._context)+\".Provider\";case E:return Oe(t,t.render,\"ForwardRef\");case T:var o=t.displayName||null;return o!==null?o:_(t.type)||\"Memo\";case M:{var s=t,c=s._payload,d=s._init;try{return _(d(c))}catch{return null}}}return null}var x=Object.assign,D=0,ee,ne,te,le,re,oe,ie;function de(){}de.__reactDisabledLog=!0;function Ae(){{if(D===0){ee=console.log,ne=console.info,te=console.warn,le=console.error,re=console.group,oe=console.groupCollapsed,ie=console.groupEnd;var t={configurable:!0,enumerable:!0,value:de,writable:!0};Object.defineProperties(console,{info:t,log:t,warn:t,error:t,group:t,groupCollapsed:t,groupEnd:t})}D++}}function Fe(){{if(D--,D===0){var t={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:x({},t,{value:ee}),info:x({},t,{value:ne}),warn:x({},t,{value:te}),error:x({},t,{value:le}),group:x({},t,{value:re}),groupCollapsed:x({},t,{value:oe}),groupEnd:x({},t,{value:ie})})}D<0&&b(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}}var O=y.ReactCurrentDispatcher,A;function S(t,l,r){{if(A===void 0)try{throw Error()}catch(s){var o=s.stack.trim().match(/\\n( *(at )?)/);A=o&&o[1]||\"\"}return`\n`+A+t}}var F=!1,R;{var We=typeof WeakMap==\"function\"?WeakMap:Map;R=new We}function se(t,l){if(!t||F)return\"\";{var r=R.get(t);if(r!==void 0)return r}var o;F=!0;var s=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var c;c=O.current,O.current=null,Ae();try{if(l){var d=function(){throw Error()};if(Object.defineProperty(d.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(d,[])}catch(v){o=v}Reflect.construct(t,[],d)}else{try{d.call()}catch(v){o=v}t.call(d.prototype)}}else{try{throw Error()}catch(v){o=v}t()}}catch(v){if(v&&o&&typeof v.stack==\"string\"){for(var i=v.stack.split(`\n`),h=o.stack.split(`\n`),u=i.length-1,m=h.length-1;u>=1&&m>=0&&i[u]!==h[m];)m--;for(;u>=1&&m>=0;u--,m--)if(i[u]!==h[m]){if(u!==1||m!==1)do if(u--,m--,m<0||i[u]!==h[m]){var p=`\n`+i[u].replace(\" at new \",\" at \");return t.displayName&&p.includes(\"<anonymous>\")&&(p=p.replace(\"<anonymous>\",t.displayName)),typeof t==\"function\"&&R.set(t,p),p}while(u>=1&&m>=0);break}}}finally{F=!1,O.current=c,Fe(),Error.prepareStackTrace=s}var k=t?t.displayName||t.name:\"\",ge=k?S(k):\"\";return typeof t==\"function\"&&R.set(t,ge),ge}function Le(t,l,r){return se(t,!1)}function Ye(t){var l=t.prototype;return!!(l&&l.isReactComponent)}function C(t,l,r){if(t==null)return\"\";if(typeof t==\"function\")return se(t,Ye(t));if(typeof t==\"string\")return S(t);switch(t){case j:return S(\"Suspense\");case P:return S(\"SuspenseList\")}if(typeof t==\"object\")switch(t.$$typeof){case E:return Le(t.render);case T:return C(t.type,l,r);case M:{var o=t,s=o._payload,c=o._init;try{return C(c(s),l,r)}catch{}}}return\"\"}var I=Object.prototype.hasOwnProperty,ae={},ce=y.ReactDebugCurrentFrame;function B(t){if(t){var l=t._owner,r=C(t.type,t._source,l?l.type:null);ce.setExtraStackFrame(r)}else ce.setExtraStackFrame(null)}function Ke(t,l,r,o,s){{var c=Function.call.bind(I);for(var d in t)if(c(t,d)){var i=void 0;try{if(typeof t[d]!=\"function\"){var h=Error((o||\"React class\")+\": \"+r+\" type `\"+d+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof t[d]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw h.name=\"Invariant Violation\",h}i=t[d](l,d,o,r,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(u){i=u}i&&!(i instanceof Error)&&(B(s),b(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",o||\"React class\",r,d,typeof i),B(null)),i instanceof Error&&!(i.message in ae)&&(ae[i.message]=!0,B(s),b(\"Failed %s type: %s\",r,i.message),B(null))}}}var $e=Array.isArray;function W(t){return $e(t)}function Ve(t){{var l=typeof Symbol==\"function\"&&Symbol.toStringTag,r=l&&t[Symbol.toStringTag]||t.constructor.name||\"Object\";return r}}function qe(t){try{return ue(t),!1}catch{return!0}}function ue(t){return\"\"+t}function me(t){if(qe(t))return b(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\",Ve(t)),ue(t)}var U=y.ReactCurrentOwner,Ge={key:!0,ref:!0,__self:!0,__source:!0},fe,be,L;L={};function ze(t){if(I.call(t,\"ref\")){var l=Object.getOwnPropertyDescriptor(t,\"ref\").get;if(l&&l.isReactWarning)return!1}return t.ref!==void 0}function Je(t){if(I.call(t,\"key\")){var l=Object.getOwnPropertyDescriptor(t,\"key\").get;if(l&&l.isReactWarning)return!1}return t.key!==void 0}function Xe(t,l){if(typeof t.ref==\"string\"&&U.current&&l&&U.current.stateNode!==l){var r=_(U.current.type);L[r]||(b('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',_(U.current.type),t.ref),L[r]=!0)}}function Ze(t,l){{var r=function(){fe||(fe=!0,b(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",l))};r.isReactWarning=!0,Object.defineProperty(t,\"key\",{get:r,configurable:!0})}}function Qe(t,l){{var r=function(){be||(be=!0,b(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",l))};r.isReactWarning=!0,Object.defineProperty(t,\"ref\",{get:r,configurable:!0})}}var en=function(t,l,r,o,s,c,d){var i={$$typeof:e,type:t,key:l,ref:r,props:d,_owner:c};return i._store={},Object.defineProperty(i._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(i,\"_self\",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(i,\"_source\",{configurable:!1,enumerable:!1,writable:!1,value:s}),Object.freeze&&(Object.freeze(i.props),Object.freeze(i)),i};function nn(t,l,r,o,s){{var c,d={},i=null,h=null;r!==void 0&&(me(r),i=\"\"+r),Je(l)&&(me(l.key),i=\"\"+l.key),ze(l)&&(h=l.ref,Xe(l,s));for(c in l)I.call(l,c)&&!Ge.hasOwnProperty(c)&&(d[c]=l[c]);if(t&&t.defaultProps){var u=t.defaultProps;for(c in u)d[c]===void 0&&(d[c]=u[c])}if(i||h){var m=typeof t==\"function\"?t.displayName||t.name||\"Unknown\":t;i&&Ze(d,m),h&&Qe(d,m)}return en(t,i,h,s,o,U.current,d)}}var Y=y.ReactCurrentOwner,he=y.ReactDebugCurrentFrame;function w(t){if(t){var l=t._owner,r=C(t.type,t._source,l?l.type:null);he.setExtraStackFrame(r)}else he.setExtraStackFrame(null)}var K;K=!1;function $(t){return typeof t==\"object\"&&t!==null&&t.$$typeof===e}function pe(){{if(Y.current){var t=_(Y.current.type);if(t)return`\n\nCheck the render method of \\``+t+\"`.\"}return\"\"}}function tn(t){{if(t!==void 0){var l=t.fileName.replace(/^.*[\\\\\\/]/,\"\"),r=t.lineNumber;return`\n\nCheck your code at `+l+\":\"+r+\".\"}return\"\"}}var _e={};function ln(t){{var l=pe();if(!l){var r=typeof t==\"string\"?t:t.displayName||t.name;r&&(l=`\n\nCheck the top-level render call using <`+r+\">.\")}return l}}function ve(t,l){{if(!t._store||t._store.validated||t.key!=null)return;t._store.validated=!0;var r=ln(l);if(_e[r])return;_e[r]=!0;var o=\"\";t&&t._owner&&t._owner!==Y.current&&(o=\" It was passed a child from \"+_(t._owner.type)+\".\"),w(t),b('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',r,o),w(null)}}function Ne(t,l){{if(typeof t!=\"object\")return;if(W(t))for(var r=0;r<t.length;r++){var o=t[r];$(o)&&ve(o,l)}else if($(t))t._store&&(t._store.validated=!0);else if(t){var s=Re(t);if(typeof s==\"function\"&&s!==t.entries)for(var c=s.call(t),d;!(d=c.next()).done;)$(d.value)&&ve(d.value,l)}}}function rn(t){{var l=t.type;if(l==null||typeof l==\"string\")return;var r;if(typeof l==\"function\")r=l.propTypes;else if(typeof l==\"object\"&&(l.$$typeof===E||l.$$typeof===T))r=l.propTypes;else return;if(r){var o=_(l);Ke(r,t.props,\"prop\",o,t)}else if(l.PropTypes!==void 0&&!K){K=!0;var s=_(l);b(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\",s||\"Unknown\")}typeof l.getDefaultProps==\"function\"&&!l.getDefaultProps.isReactClassApproved&&b(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\")}}function on(t){{for(var l=Object.keys(t.props),r=0;r<l.length;r++){var o=l[r];if(o!==\"children\"&&o!==\"key\"){w(t),b(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",o),w(null);break}}t.ref!==null&&(w(t),b(\"Invalid attribute `ref` supplied to `React.Fragment`.\"),w(null))}}function dn(t,l,r,o,s,c){{var d=Me(t);if(!d){var i=\"\";(t===void 0||typeof t==\"object\"&&t!==null&&Object.keys(t).length===0)&&(i+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var h=tn(s);h?i+=h:i+=pe();var u;t===null?u=\"null\":W(t)?u=\"array\":t!==void 0&&t.$$typeof===e?(u=\"<\"+(_(t.type)||\"Unknown\")+\" />\",i=\" Did you accidentally export a JSX literal instead of a component?\"):u=typeof t,b(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",u,i)}var m=nn(t,l,r,s,c);if(m==null)return m;if(d){var p=l.children;if(p!==void 0)if(o)if(W(p)){for(var k=0;k<p.length;k++)Ne(p[k],t);Object.freeze&&Object.freeze(p)}else b(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");else Ne(p,t)}return t===g?on(m):rn(m),m}}var sn=dn;q.Fragment=g,q.jsxDEV=sn})()});var Ue=V((Dn,De)=>{\"use strict\";De.exports=ke()});var xn={};bn(xn,{default:()=>Nn,frontmatter:()=>_n});var n=hn(Ue()),_n={title:\"How to Build a Text Editor Like Notion\",summary:\"Build your own Notion clone with React.js and learn how such text editors work.\",publishedAt:\"2020/11/07\",category:\"Engineering\",cover:{src:\"/images/posts/how-to-build-a-text-editor-like-notion/notion-clone-cover.png\",alt:\"Notion Clone React\",caption:\"Slash commands are a building block in Notions text editor.\"},tags:[\"Contenteditable\",\"Text Editor\",\"Rich Editor\",\"Notion\",\"Block Editor\",\"React.js\",\"Clone\"],externals:{Medium:\"https://medium.com/@konstantinmuenster/how-to-build-a-text-editor-like-notion-c510aedfdfcc\"}};function Ee(a){let e=Object.assign({p:\"p\",a:\"a\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",h2:\"h2\",span:\"span\",ol:\"ol\",h3:\"h3\",h4:\"h4\",em:\"em\",pre:\"pre\"},a.components),{Image:f}=e;return f||gn(\"Image\",!0,\"42:1-46:3\"),(0,n.jsxDEV)(n.Fragment,{children:[(0,n.jsxDEV)(e.p,{children:[\"Without a doubt, \",(0,n.jsxDEV)(e.a,{href:\"https://www.notion.so/\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"Notion.so\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:24,columnNumber:18},this),\" is one of my favorite apps when it comes to organizing notes. I love their minimal designed text editor because it focuses your attention on the content \\u2014\\u200Aand not on unnecessary UI elements.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:24,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Yet it provides you a ton of powerful features that lead to a better writing experience.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:26,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"For instance, the slash command is one of those features that really enhanced my writing flow. It allows you to add and style content without leaving the keyboard. Instead of clicking a UI button to add a new heading, you can just type \",(0,n.jsxDEV)(e.code,{children:\"/h1\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:28,columnNumber:237},this),\", hit \\u2018Enter\\u2019, and there you go.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:28,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Another cool thing about Notion is that it is a fully web-based application. Because of that, I was interested in how it was actually built\\u200A\\u2014\\u200Aespecially the text editor. In fact, I realized that it is not that difficult as I expected it to be.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:30,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"In this article, we take a closer look at how a text editor like Notion works and how we can build one ourselves with React.js.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:32,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"By doing this, we will discover and learn some essential frontend skills:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:34,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.ul,{children:[`\n`,(0,n.jsxDEV)(e.li,{children:[\"Working with the \",(0,n.jsxDEV)(e.strong,{children:\"DOM\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:36,columnNumber:20},this),\" and its \",(0,n.jsxDEV)(e.strong,{children:\"Nodes\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:36,columnNumber:36},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:36,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[\"Working with \",(0,n.jsxDEV)(e.strong,{children:\"Event Listeners\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:37,columnNumber:16},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:37,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[\"Advanced \",(0,n.jsxDEV)(e.strong,{children:\"State Management\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:38,columnNumber:12},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:38,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:36,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Here is how our application will look like in the end. In my opinion, a perfect project for your portfolio if you are new to React.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:40,columnNumber:1},this),`\n`,(0,n.jsxDEV)(f,{src:\"/images/posts/how-to-build-a-text-editor-like-notion/notion-clone-medium-short.gif\",alt:\"Notion Clone React\",caption:\"The final application!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:42,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"contents\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#contents\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"Contents\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:48,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.ol,{children:[`\n`,(0,n.jsxDEV)(e.li,{children:[\"The \",(0,n.jsxDEV)(e.strong,{children:\"Theory\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:50,columnNumber:9},this),\": How Does A Notion-like Text Editor Work?\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:50,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[\"The \",(0,n.jsxDEV)(e.strong,{children:\"Practice\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:51,columnNumber:9},this),\": How Can We Rebuild It?\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:51,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[(0,n.jsxDEV)(e.strong,{children:\"Ideas\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:52,columnNumber:5},this),\" For Further Development\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:52,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:(0,n.jsxDEV)(e.strong,{children:\"Resources\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:53,columnNumber:5},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:53,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:50,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h3,{id:\"the-theory-how-does-a-notion-like-text-editor-work\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#the-theory-how-does-a-notion-like-text-editor-work\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"The Theory: How Does A Notion-like Text Editor Work?\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:55,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"editable-blocks\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#editable-blocks\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"Editable Blocks\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:57,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"The core concept of a Notion-like text editor is what I would like to call \",(0,n.jsxDEV)(e.em,{children:\"blocks\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:59,columnNumber:76},this),\". Each time you hit \\u2018Enter\\u2019 on your keyboard, you create a new block. So essentially, each page consists of one or many blocks.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:59,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"From a user perspective, a block contains content and has a specific styling that is associated with the block type. Types of blocks could be headings, quotes, or paragraphs. Each of those has a unique styling.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:61,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"From a technical perspective, a block is a so-called \",(0,n.jsxDEV)(e.code,{children:\"contenteditable\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:63,columnNumber:54},this),\" element. Nearly every HTML element can be turned into an editable one. You just have to add the \",(0,n.jsxDEV)(e.code,{children:'contenteditable=\"true\"'},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:63,columnNumber:168},this),\" attribute to it. This indicates if the element should be editable by the user. If so, users can edit their content directly in the HTML document as if it would be an \",(0,n.jsxDEV)(e.code,{children:\"input\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:63,columnNumber:359},this),\" or \",(0,n.jsxDEV)(e.code,{children:\"textarea\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:63,columnNumber:370},this),\" element.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:63,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The concept gets clear in an example:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:65,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Let\\u2019s say a user adds a new block with the type of \",(0,n.jsxDEV)(e.em,{children:\"Heading\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:67,columnNumber:52},this),\". This produces the following HTML output:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:67,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-jsx\",children:`<h1 contenteditable=\"true\"> I am editable by the user </h1>\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:69,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:69,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Since the user selected \",(0,n.jsxDEV)(e.em,{children:\"Heading\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:73,columnNumber:25},this),\" as the block type, we append an \",(0,n.jsxDEV)(e.code,{children:\"h1\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:73,columnNumber:67},this),\" element to the DOM. Thus, it gets an appropriate heading styling. The user could now directly edit the content of that \",(0,n.jsxDEV)(e.code,{children:\"h1\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:73,columnNumber:191},this),\" element by placing the cursor inside it.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:73,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"slash-commands\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#slash-commands\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"Slash Commands\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:75,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Now that the user can add new blocks to the page by pressing \\u2018Enter\\u2019, how can he/she determine the type of an added block?\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:77,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"In Notion, you can do this via slash commands.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:79,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"The concept of slash commands is simple yet effective. Every time you type a \",(0,n.jsxDEV)(e.code,{children:\"/\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:81,columnNumber:78},this),\" inside a block, a type-ahead menu pops up right above the cursor. This menu shows you all available block types. As you write along, you filter the block types with your query. If you found the right block type, just hit \\u2018Enter\\u2019, and the block turns into whatever you selected.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:81,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"In our application, all slash commands will be equivalent to the corresponding HTML elements. Meaning an \",(0,n.jsxDEV)(e.code,{children:\"/h1\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:83,columnNumber:106},this),\" command turns into an H1 heading and a \",(0,n.jsxDEV)(e.code,{children:\"/p\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:83,columnNumber:151},this),\" command turns into a paragraph, for example.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:83,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Technically, an existing block like \",(0,n.jsxDEV)(e.code,{children:'<h1 contenteditable=\"true\"> </h1>'},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:85,columnNumber:37},this),\" would consequently turn into \",(0,n.jsxDEV)(e.code,{children:'<p contenteditable=\"true\"> </p>'},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:85,columnNumber:102},this),\" once the user types \",(0,n.jsxDEV)(e.code,{children:\"/p\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:85,columnNumber:156},this),\" and hits \\u2018 Enter\\u2019.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:85,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h3,{id:\"the-practice-how-can-we-rebuildit\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#the-practice-how-can-we-rebuildit\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"The Practice: How Can We Rebuild\\xA0It?\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:87,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Now that we know how it works in theory, let\\u2019s put it into practice. First of all, we create a new React project. You can do that by using create-react-app or any other tooling.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:89,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"1-create-an-editablepage\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#1-create-an-editablepage\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"1 \\u2014Create An Editable\\xA0Page\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:91,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Having the setup done, we create our first component: \",(0,n.jsxDEV)(e.code,{children:\"editablePage.js\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:93,columnNumber:55},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:93,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-jsx:editablePage.js\",children:`\nconst initialBlock = { id: uid(), html: '', tag: 'p' };\n\nclass EditablePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { blocks: [initialBlock] };\n  }\n\n  render() {\n    return (\n      <div className=\"Page\">\n        {this.state.blocks.map((block, key) => {\n          return (\n            <div key={key} id={block.id}>\n              Tag: {block.tag}, Content: {block.html}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default EditablePage;\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:95,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:95,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"The page component stores and renders all blocks we will create later on. As a start, we only provide an initial first block that we define at the very top. This block will turn into an empty paragraph element once we created our editable block component. For now, we just render a plain \",(0,n.jsxDEV)(e.code,{children:\"div\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:123,columnNumber:289},this),\" container.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:123,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Note: Since every block needs a unique ID, I created a helper function \",(0,n.jsxDEV)(e.code,{children:\"uid()\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:125,columnNumber:72},this),\" that we can use for initializing new blocks. In case you want to use the same function:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:125,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-js:uid.js\",children:`const uid = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:127,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:127,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"2create-an-editableblock\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#2create-an-editableblock\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"2\\u200A\\u2014\\u200ACreate An Editable\\xA0Block\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:133,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"As a next step, we create an editable block component that we can render instead of the \",(0,n.jsxDEV)(e.code,{children:\"div\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:135,columnNumber:89},this),\" container. For that, we have to install an external dependency called \",(0,n.jsxDEV)(e.code,{children:\"react-contenteditable\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:135,columnNumber:165},this),\".\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:135,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.em,{children:\"React-Contenteditable\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:137,columnNumber:1},this),\" is a package that makes working with editable elements in React really easy. It abstracts a lot of complexity for us so that we only need to pass the right props to the \",(0,n.jsxDEV)(e.code,{children:\"ContentEditable\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:137,columnNumber:194},this),\" component. The component exposed by the package then handles the rest.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:137,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"To install the package, run \",(0,n.jsxDEV)(e.code,{children:\"npm i react-contenteditable\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:139,columnNumber:29},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:139,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Next, we create a new file called \",(0,n.jsxDEV)(e.code,{children:\"editableBlock.js\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:141,columnNumber:35},this),\":\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:141,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-jsx:editableBlock.js\",children:`class EditableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.contentEditable = React.createRef();\n    this.state = {\n      html: '',\n      tag: 'p',\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ html: this.props.html, tag: this.props.tag });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const htmlChanged = prevState.html !== this.state.html;\n    const tagChanged = prevState.tag !== this.state.tag;\n    if (htmlChanged || tagChanged) {\n      this.props.updatePage({\n        id: this.props.id,\n        html: this.state.html,\n        tag: this.state.tag,\n      });\n    }\n  }\n\n  onChangeHandler(e) {\n    this.setState({ html: e.target.value });\n  }\n\n  render() {\n    return (\n      <ContentEditable\n        className=\"Block\"\n        innerRef={this.contentEditable}\n        html={this.state.html}\n        tagName={this.state.tag}\n        onChange={this.onChangeHandler}\n      />\n    );\n  }\n}\n\nexport default EditableBlock;\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:143,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:143,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"The editable block renders the \",(0,n.jsxDEV)(e.code,{children:\"ContentEditable\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:191,columnNumber:32},this),\" component that we imported from the \",(0,n.jsxDEV)(e.code,{children:\"react-contenteditable\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:191,columnNumber:86},this),\" package. By passing \",(0,n.jsxDEV)(e.code,{children:\"html\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:191,columnNumber:130},this),\" and \",(0,n.jsxDEV)(e.code,{children:\"tagName\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:191,columnNumber:141},this),\" as props to the component, we can define what should be displayed and how it should be displayed. Remember, the \",(0,n.jsxDEV)(e.code,{children:\"tagName\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:191,columnNumber:263},this),\" defines the HTML element type and hence the styling.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:191,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"If we were to change the block type later on (e.g. from \",(0,n.jsxDEV)(e.code,{children:\"p\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:193,columnNumber:57},this),\" to \",(0,n.jsxDEV)(e.code,{children:\"h1\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:193,columnNumber:64},this),\"), we can simply update the \",(0,n.jsxDEV)(e.code,{children:\"tagName\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:193,columnNumber:96},this),\" prop. Pretty easy, right?\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:193,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"We also added advanced state management to the block component. When the component mounts, it receives the initial HTML content and tag via props and stores them in the state. From now on, the block component fully owns the draft state. Any subsequent changes to the \",(0,n.jsxDEV)(e.code,{children:\"html\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:195,columnNumber:268},this),\" or \",(0,n.jsxDEV)(e.code,{children:\"tagName\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:195,columnNumber:278},this),\" prop are being ignored.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:195,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"When there have been relevant updates to the \",(0,n.jsxDEV)(e.code,{children:\"html\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:197,columnNumber:46},this),\" or \",(0,n.jsxDEV)(e.code,{children:\"tagName\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:197,columnNumber:56},this),\" state property, we update the page component\\u2019s state in the \",(0,n.jsxDEV)(e.code,{children:\"componentDidUpdate\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:197,columnNumber:126},this),\" lifecycle hook too. Thus, we avoid an unnecessary re-rendering of the page.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:197,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Having our \",(0,n.jsxDEV)(e.code,{children:\"editableBlock\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:199,columnNumber:12},this),\" component set up, we can finally use it in our page component:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:199,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-jsx:editablePage.js\",children:`const initialBlock = { id: uid(), html: '', tag: 'p' };\n\nclass EditablePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updatePageHandler = this.updatePageHandler.bind(this);\n    this.addBlockHandler = this.addBlockHandler.bind(this);\n    this.deleteBlockHandler = this.deleteBlockHandler.bind(this);\n    this.state = { blocks: [initialBlock] };\n  }\n\n  updatePageHandler(updatedBlock) {\n    const blocks = this.state.blocks;\n    const index = blocks.map(b => b.id).indexOf(updatedBlock.id);\n    const updatedBlocks = [...blocks];\n    updatedBlocks[index] = {\n      ...updatedBlocks[index],\n      tag: updatedBlock.tag,\n      html: updatedBlock.html,\n    };\n    this.setState({ blocks: updatedBlocks });\n  }\n\n  addBlockHandler(currentBlock) {\n    const newBlock = { id: uid(), html: '', tag: 'p' };\n    const blocks = this.state.blocks;\n    const index = blocks.map(b => b.id).indexOf(currentBlock.id);\n    const updatedBlocks = [...blocks];\n    updatedBlocks.splice(index + 1, 0, newBlock);\n    this.setState({ blocks: updatedBlocks }, () => {\n      currentBlock.ref.nextElementSibling.focus();\n    });\n  }\n\n  deleteBlockHandler(currentBlock) {\n    const previousBlock = currentBlock.ref.previousElementSibling;\n    if (previousBlock) {\n      const blocks = this.state.blocks;\n      const index = blocks.map(b => b.id).indexOf(currentBlock.id);\n      const updatedBlocks = [...blocks];\n      updatedBlocks.splice(index, 1);\n      this.setState({ blocks: updatedBlocks }, () => {\n        setCaretToEnd(previousBlock);\n        previousBlock.focus();\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Page\">\n        {this.state.blocks.map((block, key) => {\n          return (\n            <EditableBlock\n              key={key}\n              id={block.id}\n              tag={block.tag}\n              html={block.html}\n              updatePage={this.updatePageHandler}\n              addBlock={this.addBlockHandler}\n              deleteBlock={this.deleteBlockHandler}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default EditablePage;\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:201,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:201,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Besides using the \",(0,n.jsxDEV)(e.code,{children:\"EditableBlock\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:274,columnNumber:19},this),\" component inside our \",(0,n.jsxDEV)(e.code,{children:\"render\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:274,columnNumber:56},this),\" hook, we additionally added new methods in the page component:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:274,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.ul,{children:[`\n`,(0,n.jsxDEV)(e.li,{children:[\"The \",(0,n.jsxDEV)(e.code,{children:\"updateBlockHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:276,columnNumber:7},this),\" that we already use in our block component takes care of keeping the page and block state in sync.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:276,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[\"The \",(0,n.jsxDEV)(e.code,{children:\"addBlockHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:277,columnNumber:7},this),\" appends a new block and sets the focus to it.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:277,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[\"The \",(0,n.jsxDEV)(e.code,{children:\"deleteBlockHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:278,columnNumber:7},this),\" removes a block and sets the focus to the preceding block.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:278,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:276,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"We pass all three methods as props to the editable block.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:280,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Note: In the \",(0,n.jsxDEV)(e.code,{children:\"deleteBlockHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:282,columnNumber:14},this),\", we use another helper function that manually sets the cursor to the end of the block content. If we would just focus the element as we did in \",(0,n.jsxDEV)(e.code,{children:\"addBlockHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:282,columnNumber:178},this),\", it would focus the element though, but with a cursor set to the very beginning of the block content. In case you want to use the same \",(0,n.jsxDEV)(e.code,{children:\"setCaretToEnd\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:282,columnNumber:331},this),\" helper function:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:282,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-js:setCaretToEnd.js\",children:`const setCaretToEnd = element => {\n  const range = document.createRange();\n  const selection = window.getSelection();\n  range.selectNodeContents(element);\n  range.collapse(false);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  element.focus();\n};\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:284,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:284,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"3implement-a-keydownlistener\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#3implement-a-keydownlistener\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"3\\u200A\\u2014\\u200AImplement A KeyDown\\xA0Listener\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:296,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"So far, we can only add text content to our initially added block. Let\\u2019s make things a bit more interactive with our first event listener. This will allow us to add and delete blocks as we like.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:298,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Inside \",(0,n.jsxDEV)(e.code,{children:\"editableBlock.js\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:300,columnNumber:8},this),\", we create an \",(0,n.jsxDEV)(e.code,{children:\"onKeyDownHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:300,columnNumber:41},this),\" method that we pass on to the \",(0,n.jsxDEV)(e.code,{children:\"ContentEditable\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:300,columnNumber:90},this),\" component:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:300,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-jsx:editableBlock.js\",children:`class EditableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    // ...\n    this.onKeyDownHandler = this.onKeyDownHandler.bind(this);\n    this.contentEditable = React.createRef();\n    this.state = {\n      htmlBackup: null,\n      html: '',\n      tag: 'p',\n      previousKey: '',\n    };\n  }\n\n  // ...\n\n  onKeyDownHandler(e) {\n    if (e.key === '/') {\n      this.setState({ htmlBackup: this.state.html });\n    }\n    if (e.key === 'Enter') {\n      if (this.state.previousKey !== 'Shift') {\n        e.preventDefault();\n        this.props.addBlock({\n          id: this.props.id,\n          ref: this.contentEditable.current,\n        });\n      }\n    }\n    if (e.key === 'Backspace' && !this.state.html) {\n      e.preventDefault();\n      this.props.deleteBlock({\n        id: this.props.id,\n        ref: this.contentEditable.current,\n      });\n    }\n    this.setState({ previousKey: e.key });\n  }\n\n  render() {\n    return (\n      <ContentEditable\n        className=\"Block\"\n        innerRef={this.contentEditable}\n        html={this.state.html}\n        tagName={this.state.tag}\n        onChange={this.onChangeHandler}\n        onKeyDown={this.onKeyDownHandler}\n      />\n    );\n  }\n}\n\nexport default EditableBlock;\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:302,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:302,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"As mentioned, this event listener is primarily responsible for adding and deleting blocks. But let\\u2019s break the \",(0,n.jsxDEV)(e.code,{children:\"onKeyDownHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:359,columnNumber:112},this),\" down bit by bit:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:359,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.ul,{children:[`\n`,(0,n.jsxDEV)(e.li,{children:[\"Regardless of what key has been pressed, store the key in the state. We need the \",(0,n.jsxDEV)(e.code,{children:\"previousKey\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:361,columnNumber:84},this),\" to be able to detect key combinations.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:361,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[\"When the user pressed \",(0,n.jsxDEV)(e.code,{children:\"/\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:362,columnNumber:25},this),\", we store a copy of the current HTML content in the state. We do that because we want to restore a clean HTML version after the user has finished the process of selecting a block type.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:362,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[\"When the user pressed \",(0,n.jsxDEV)(e.code,{children:\"Enter\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:363,columnNumber:25},this),\", we prevent the default behavior (i.e. adding a new line). Instead, we create a new block by using the \",(0,n.jsxDEV)(e.code,{children:\"addBlock\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:363,columnNumber:136},this),\" method which we previously created in the page component.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:363,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[\"Because the user should still be able to add new lines somehow, we use the \",(0,n.jsxDEV)(e.code,{children:\"previousKey\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:364,columnNumber:78},this),\" state property to detect a \",(0,n.jsxDEV)(e.code,{children:\"Shift+Enter\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:364,columnNumber:119},this),\" key combination. If that is the case, we do not add a new block and allow the default \\u2018Enter\\u2019 behavior to happen.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:364,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:[\"Lastly, we delete an empty block when the user presses \",(0,n.jsxDEV)(e.code,{children:\"Backspace\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:365,columnNumber:58},this),\" with the \",(0,n.jsxDEV)(e.code,{children:\"deleteBlock\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:365,columnNumber:79},this),\" method.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:365,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:361,columnNumber:1},this),`\n`,(0,n.jsxDEV)(f,{src:\"/images/posts/how-to-build-a-text-editor-like-notion/1__FwMgJ660ehUK1SZgYLYjMA.gif\",alt:\"Notion Clone React\",caption:\"So far, we can create and delete blocks.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:367,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Now that we can create new blocks, what about slash commands and selecting different block types? We cover that in the next steps.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:373,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"4add-a-selectmenu\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#4add-a-selectmenu\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"4\\u200A\\u2014\\u200AAdd A Select\\xA0Menu\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:375,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"As mentioned earlier, when the user types a \",(0,n.jsxDEV)(e.code,{children:\"/\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:377,columnNumber:45},this),\", we want to display a select menu. The menu shall list up all available block types. A specific block type can then be selected either by clicking on it or by typing in the matching slash command.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:377,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"To implement such a select menu, we first have to add another dependency: \",(0,n.jsxDEV)(e.em,{children:\"match-sorter\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:379,columnNumber:75},this),\". This is a simple package that helps us with querying the matching block types.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:379,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"To install it, run: \",(0,n.jsxDEV)(e.code,{children:\"npm i match-sorter\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:381,columnNumber:21},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:381,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Having that done, we create a new file called \",(0,n.jsxDEV)(e.code,{children:\"selectMenu.js\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:383,columnNumber:47},this),\" with the following contents:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:383,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-jsx:selectMenu.js\",children:`const MENU_HEIGHT = 150;\nconst allowedTags = [\n  {\n    id: 'page-title',\n    tag: 'h1',\n    label: 'Page Title',\n  },\n  {\n    id: 'heading',\n    tag: 'h2',\n    label: 'Heading',\n  },\n  {\n    id: 'subheading',\n    tag: 'h3',\n    label: 'Subheading',\n  },\n  {\n    id: 'paragraph',\n    tag: 'p',\n    label: 'Paragraph',\n  },\n];\n\nclass SelectMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.keyDownHandler = this.keyDownHandler.bind(this);\n    this.state = {\n      command: '',\n      items: allowedTags,\n      selectedItem: 0,\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.keyDownHandler);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const command = this.state.command;\n    if (prevState.command !== command) {\n      const items = matchSorter(allowedTags, command, { keys: ['tag'] });\n      this.setState({ items: items });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.keyDownHandler);\n  }\n\n  keyDownHandler(e) {\n    const items = this.state.items;\n    const selected = this.state.selectedItem;\n    const command = this.state.command;\n\n    switch (e.key) {\n      case 'Enter':\n        e.preventDefault();\n        this.props.onSelect(items[selected].tag);\n        break;\n      case 'Backspace':\n        if (!command) this.props.close();\n        this.setState({ command: command.substring(0, command.length - 1) });\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        const prevSelected = selected === 0 ? items.length - 1 : selected - 1;\n        this.setState({ selectedItem: prevSelected });\n        break;\n      case 'ArrowDown':\n      case 'Tab':\n        e.preventDefault();\n        const nextSelected = selected === items.length - 1 ? 0 : selected + 1;\n        this.setState({ selectedItem: nextSelected });\n        break;\n      default:\n        this.setState({ command: this.state.command + e.key });\n        break;\n    }\n  }\n\n  render() {\n    const x = this.props.position.x;\n    const y = this.props.position.y - MENU_HEIGHT;\n    const positionAttributes = { top: y, left: x };\n\n    return (\n      <div className=\"SelectMenu\" style={positionAttributes}>\n        <div className=\"Items\">\n          {this.state.items.map((item, key) => {\n            const selectedItem = this.state.selectedItem;\n            const isSelected = this.state.items.indexOf(item) === selectedItem;\n            return (\n              <div\n                className={isSelected ? 'Selected' : null}\n                key={key}\n                role=\"button\"\n                tabIndex=\"0\"\n                onClick={() => this.props.onSelect(item.tag)}\n              >\n                {item.label}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SelectMenu;\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:385,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:385,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"At the very top, we define what block types should be selectable by the user. Each type has a tag and a label: the tag defines which HTML element type shall be used and the label defines the display name inside our menu.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:500,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"When the component mounts, we calculate the position of the menu on the screen inside our \",(0,n.jsxDEV)(e.code,{children:\"render\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:502,columnNumber:91},this),\" hook. There, we use \",(0,n.jsxDEV)(e.code,{children:\"this.props.position\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:502,columnNumber:120},this),\". This object contains the current position of the cursor since we want to display the menu right above it.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:502,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Additionally, we attach a \",(0,n.jsxDEV)(e.code,{children:\"keyDown\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:504,columnNumber:27},this),\" event listener in the \",(0,n.jsxDEV)(e.code,{children:\"componentDidMount\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:504,columnNumber:59},this),\" hook. It takes care of storing the entered command in state and enables the user to select a block type via keyboard.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:504,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Whenever the \",(0,n.jsxDEV)(e.code,{children:\"command\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:506,columnNumber:14},this),\" state property changes, we run our imported \",(0,n.jsxDEV)(e.code,{children:\"matchedSorter\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:506,columnNumber:68},this),\" function to filter for matching block types. Thus, the select menu shows only block types that match with our command.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:506,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Finally, when the user hits \\u2018Enter\\u2019 or clicks on an entry, we execute an \",(0,n.jsxDEV)(e.code,{children:\"onSelect\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:508,columnNumber:74},this),\" method that we receive via props.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:508,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Admittedly, this was a lot of code at once. But if you go through it step by step, it should be understandable hopefully.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:510,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"5add-block-type-selection\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#5add-block-type-selection\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"5\\u200A\\u2014\\u200AAdd Block Type Selection\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:512,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Next, we can put things together. Since we have our select menu component in place, we can add it to \",(0,n.jsxDEV)(e.code,{children:\"editableBlock.js\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:514,columnNumber:102},this),\":\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:514,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-jsx:editableBlock.js\",children:`class EditableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    // ...\n    this.onKeyUpHandler = this.onKeyUpHandler.bind(this);\n    this.openSelectMenuHandler = this.openSelectMenuHandler.bind(this);\n    this.closeSelectMenuHandler = this.closeSelectMenuHandler.bind(this);\n    this.tagSelectionHandler = this.tagSelectionHandler.bind(this);\n    this.contentEditable = React.createRef();\n    this.state = {\n      htmlBackup: null,\n      html: '',\n      tag: 'p',\n      previousKey: '',\n      selectMenuIsOpen: false,\n      selectMenuPosition: {\n        x: null,\n        y: null,\n      },\n    };\n  }\n\n  // ...\n\n  onKeyUpHandler(e) {\n    if (e.key === '/') {\n      this.openSelectMenuHandler();\n    }\n  }\n\n  openSelectMenuHandler() {\n    const { x, y } = getCaretCoordinates();\n    this.setState({\n      selectMenuIsOpen: true,\n      selectMenuPosition: { x, y },\n    });\n    document.addEventListener('click', this.closeSelectMenuHandler);\n  }\n\n  closeSelectMenuHandler() {\n    this.setState({\n      htmlBackup: null,\n      selectMenuIsOpen: false,\n      selectMenuPosition: { x: null, y: null },\n    });\n    document.removeEventListener('click', this.closeSelectMenuHandler);\n  }\n\n  tagSelectionHandler(tag) {\n    this.setState({ tag: tag, html: this.state.htmlBackup }, () => {\n      setCaretToEnd(this.contentEditable.current);\n      this.closeSelectMenuHandler();\n    });\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.selectMenuIsOpen && (\n          <SelectMenu\n            position={this.state.selectMenuPosition}\n            onSelect={this.tagSelectionHandler}\n            close={this.closeSelectMenuHandler}\n          />\n        )}\n        <ContentEditable\n          className=\"Block\"\n          innerRef={this.contentEditable}\n          html={this.state.html}\n          tagName={this.state.tag}\n          onChange={this.onChangeHandler}\n          onKeyDown={this.onKeyDownHandler}\n          onKeyUp={this.onKeyUpHandler}\n        />\n      </>\n    );\n  }\n}\n\nexport default EditableBlock;\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:516,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:516,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"First, we import our \",(0,n.jsxDEV)(e.code,{children:\"SelectMenu\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:599,columnNumber:22},this),\" component and render it conditionally. We can control its visibility by our state property \",(0,n.jsxDEV)(e.code,{children:\"selectMenuIsOpen\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:599,columnNumber:126},this),\". If we set this to true, we render the menu additionally to the \",(0,n.jsxDEV)(e.code,{children:\"ContentEditable\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:599,columnNumber:209},this),\" component.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:599,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Next, we implemented the logic that defines when and where we want to show it.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:601,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"We defined two methods that handle the menu\\u2019s opening and closing. When we open it, we first get the coordinates of the currently set cursor. We do this because we want to open up the menu right above the cursor. Lastly, we store this position in the state, set \",(0,n.jsxDEV)(e.code,{children:\"selectMenuIsOpen\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:603,columnNumber:263},this),\" to true, and attach a click listener.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:603,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The click listener is responsible for closing the select menu once there has been another click on the screen\\u200A\\u2014\\u200Ano matter if it was on the menu itself or outside it. Both actions should close it.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:605,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Our \",(0,n.jsxDEV)(e.code,{children:\"closeSelectMenuHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:607,columnNumber:5},this),\" method then is fairly simple. We just reset our previously set state properties and detach the click listener again.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:607,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Having the opening and closing handlers implemented, we also need to define when we actually want to open the menu.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:609,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"From a user perspective, we want to open the menu once the user enters a \",(0,n.jsxDEV)(e.code,{children:\"/\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:611,columnNumber:74},this),\". Therefore, it seems intuitive to add the \",(0,n.jsxDEV)(e.code,{children:\"this.openSelectMenuHandler()\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:611,columnNumber:120},this),\" call in our previously defined \",(0,n.jsxDEV)(e.code,{children:\"onKeyDownHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:611,columnNumber:182},this),\" method, right? Because there, we already check if the user pressed the \",(0,n.jsxDEV)(e.code,{children:\"/\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:611,columnNumber:272},this),\" key.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:611,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"In fact, we have to add another event listener for that. The menu should only show up once the user releases the \",(0,n.jsxDEV)(e.code,{children:\"/\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:613,columnNumber:114},this),\" key. Otherwise, the positioning of the menu would not work correctly. Hence, we add a new \",(0,n.jsxDEV)(e.code,{children:\"keyUp\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:613,columnNumber:208},this),\" event listener for that.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:613,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Now there is only one final step to take. Remember that we pass an \",(0,n.jsxDEV)(e.code,{children:\"onSelect\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:615,columnNumber:68},this),\" function as a prop to the select menu component? To make the selection process work, we have to define an associated method for that in our editable block component.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:615,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Gladly, this method is rather simple. In the \",(0,n.jsxDEV)(e.code,{children:\"tagSelectionHandler\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:617,columnNumber:46},this),\", we receive the selected block type as the \",(0,n.jsxDEV)(e.code,{children:\"tag\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:617,columnNumber:111},this),\" argument. With it, we can update our \",(0,n.jsxDEV)(e.code,{children:\"tagName\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:617,columnNumber:154},this),\" state property as well as restore the HTML backup, i.e. the HTML content without the entered command.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:617,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"If that process has finished, we set the cursor to the editable block again and close the menu.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:619,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"And finally, believe it or not\\u2026 we are done \\u{1F389}\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:621,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Note: I again used a helper function for obtaining the cursor coordinates. If you want to use the same function, here it is:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:623,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"language-js\",children:`const getCaretCoordinates = () => {\n  let x, y;\n  const selection = window.getSelection();\n  if (selection.rangeCount !== 0) {\n    const range = selection.getRangeAt(0).cloneRange();\n    range.collapse(false);\n    const rect = range.getClientRects()[0];\n    if (rect) {\n      x = rect.left;\n      y = rect.top;\n    }\n  }\n  return { x, y };\n};\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:625,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:625,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h3,{id:\"ideas-for-further-development\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#ideas-for-further-development\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),(0,n.jsxDEV)(e.strong,{children:\"Ideas\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:642,columnNumber:5},this),\" For Further Development\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:642,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Now that we have the core functionality of Notion\\u2019s text editor rebuilt, we have a perfect foundation for further development. There are many features that we can add to our application to improve it further.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:644,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"I always like to look for inspiration in existing apps and see if I can build their features on my own. Same with Notion. Here are two concrete examples:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:646,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"context-menu-based-on-selection\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#context-menu-based-on-selection\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"Context Menu Based On Selection\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:648,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"So far, we only show a select menu when the user types a \",(0,n.jsxDEV)(e.code,{children:\"/\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:650,columnNumber:58},this),\". But what if the user wants to quickly edit the type of an existing block? Or he/she wants to remove a block?\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:650,columnNumber:1},this),`\n`,(0,n.jsxDEV)(f,{src:\"/images/posts/how-to-build-a-text-editor-like-notion/1__CsyyrDAk1vei6qrGVZtGSA.png\",alt:\"Notion Clone React Context Menu\",caption:\"Context Menu that will pop up once the user selects content\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:652,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Here, a context menu comes in handy. Whenever the user selects the block\\u2019s content, we display a menu with two options: either turn the existing block\\u2019s type into another or delete the block itself with a single click.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:658,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"rearrange-blocks-by-drag-anddrop\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#rearrange-blocks-by-drag-anddrop\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"Rearrange Blocks By Drag and\\xA0Drop\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:660,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Because we have an underlying block structure, we can rearrange our content fairly easily. Maybe a user realizes that this one paragraph should be further at the top of the page. In Notion, you can easily reorder blocks with a smooth drag and drop functionality. And we can do that too!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:662,columnNumber:1},this),`\n`,(0,n.jsxDEV)(f,{src:\"/images/posts/how-to-build-a-text-editor-like-notion/1__gg4NH3JJRtioqNutwJf__DQ.gif\",alt:\"Notion Clone React Drag Drop\",caption:\"Drag And Drop functionality to reorder blocks\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:664,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h3,{id:\"resources\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#resources\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"Resources\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:670,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Admittedly, we covered a lot in this article\\u2026 but I think the idea and process of building a Notion clone are really cool and exciting, especially for React beginners. Therefore, I wanted to provide you all the things you need.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:672,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"final-application\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#final-application\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"Final Application\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:674,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"You find a working example for the \",(0,n.jsxDEV)(e.a,{href:\"https://codesandbox.io/s/notion-text-editor-gugcc\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"final application on CodeSandbox\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:676,columnNumber:36},this),\". It also includes all of the CSS stylings which we did not cover in this article.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:676,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"advanced-application\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#advanced-application\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"Advanced Application\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:678,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Moreover, if you want to enhance your application with more features (e.g. features like those I mentioned in the last section), have a look at my more advanced application. It might be a good source of inspiration too.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:680,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This advanced Notion Clone also includes a backend part that persists the user content on a server. Great if you want to get in touch with basic CRUD operations in Node/Express!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:682,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Live Demo: \",(0,n.jsxDEV)(e.a,{href:\"https://notion-clone.kmuenster.com/\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"https://notion-clone.kmuenster.com/\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:684,columnNumber:12},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:684,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Github Repository: \",(0,n.jsxDEV)(e.a,{href:\"https://github.com/konstantinmuenster/notion-clone\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"https://github.com/konstantinmuenster/notion-clone\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:686,columnNumber:20},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:686,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h4,{id:\"working-with-the-cursor-in-thebrowser\",children:[(0,n.jsxDEV)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#working-with-the-cursor-in-thebrowser\",children:(0,n.jsxDEV)(e.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this),\"Working With The Cursor In The\\xA0Browser\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:688,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"As you noticed, I used some helper functions in our application. These functions primarily help us to work with the cursor in the browser, e.g. obtaining the cursor coordinates.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:690,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Since this was something I struggled with a lot during development, I recently published an article about it. In case you want to dive deeper into this topic, here it is:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:692,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:(0,n.jsxDEV)(e.a,{href:\"https://medium.com/javascript-in-plain-english/how-to-find-the-caret-inside-a-contenteditable-element-955a5ad9bf81\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"How To Find The Caret Inside A Contenteditable Element\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:694,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:694,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"As always, thanks for reading! If you stumbled with any questions or issues throughout this article, let me know in the comment section. Thus, I can update and improve the article if needed. I appreciate any feedback!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:696,columnNumber:1},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\",lineNumber:1,columnNumber:1},this)}function vn(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsxDEV)(e,Object.assign({},a,{children:(0,n.jsxDEV)(Ee,a,void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this)}),void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx\"},this):Ee(a)}var Nn=vn;function gn(a,e,f){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(f?\"\\nIt\\u2019s referenced in your code at `\"+f+\"` in `/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-05bfe616-4800-4225-8aca-9e954d7633d2.mdx`\":\"\"))}return pn(xn);})();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n;return Component;"
  },
  "_id": "posts/001-how-to-build-a-text-editor-like-notion.mdx",
  "_raw": {
    "sourceFilePath": "posts/001-how-to-build-a-text-editor-like-notion.mdx",
    "sourceFileName": "001-how-to-build-a-text-editor-like-notion.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/001-how-to-build-a-text-editor-like-notion"
  },
  "type": "Post",
  "slug": "how-to-build-a-text-editor-like-notion"
}