{
  "title": "How To Build A Text Editor With Lexical and React",
  "publishedAt": "2023-01-09T21:00:00.000Z",
  "summary": "Lexical is a new framework for building rich text editors. Let's build a simple WYSIWYG editor with it.",
  "cover": {
    "src": "/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-text-editor-react-tutorial.png",
    "alt": "Rich Text Editor with Lexical and React",
    "caption": {
      "raw": "Lexical integrates perfectly with React to build complex editor experiences.",
      "html": "<p>Lexical integrates perfectly with React to build complex editor experiences.</p>"
    },
    "type": "Image",
    "_raw": {}
  },
  "externals": {
    "Medium": "https://konstantinmuenster.medium.com/how-to-build-a-text-editor-with-lexical-and-react-27204c186d0f",
    "type": "Externals",
    "_raw": {}
  },
  "category": "Engineering",
  "tags": [
    "Contenteditable",
    "Text Editor",
    "Rich Editor",
    "WYSIWYG",
    "Block Editor",
    "React.js",
    "Lexical",
    "Notion"
  ],
  "body": {
    "raw": "\nIn April 2022, Meta open-sourced [Lexical](https://lexical.dev/) – “an extensible text editor framework”.\n\nGiven that it powers some of the most popular web apps in the world, it especially focuses on accessibility and performance. Among other things, by its native support for React 18.\n\nThis caught my eye since a lot of text editing experiences are inherently inaccessible and struggle performance-wise as things get more complicated. Furthermore, Lexical adopted a lot of paradigms of React which makes it fairly easy to pick it up as a React developer (although it is framework agnostic).\n\nSo, I decided to give it a try and build a simple WYSIWYG editor with it.\n\n<Image\n  src=\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-react-rich-text-demo.gif\"\n  alt=\"Rich Text Editor with Lexical and React\"\n  caption=\"WYSIWYG editor built with Lexical and React\"\n/>\n\n<LearningPath\n  items={[\n    'Understanding Lexical’s foundational concepts (editor state, nodes, commands)',\n    'Setting up an editor with Lexical and React',\n    'Developing custom plugins',\n  ]}\n/>\n\n<TargetAudience>\n  React developers with beginner or intermediate text editing experience\n</TargetAudience>\n\nSo, let's jump right into it!\n\n## How To Setup Lexical with React\n\nLexical can be used with any framework of your choice – or without a framework at all. It even offers a **`@lexical/headless`** package which lets you run the editor in a Node.js environment. This can come in handy sometimes (e.g. running Lexical on the server)!\n\nIn our example, however, we will use Lexical with React.\n\nSetting up an editor with Lexical and React is fairly easy. First we need to install necessary packages:\n\n```bash\nnpm i react react-dom lexical @lexical/react\n```\n\nLexical ships with a React-specific package (`@lexical/react`) that let you compose your first editor in just a breeze:\n\n```tsx:Editor.tsx\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\n\ntype LexicalEditorProps = {\n  config: Parameters<typeof LexicalComposer>['0']['initialConfig'];\n};\n\nexport function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<div>Start writing...</div>}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n    </LexicalComposer>\n  );\n}\n```\n\nEach editor has a `LexicalComposer` instance at the root. This root component internally executes Lexical’s `createEditor` function and exposes the editor instance to its children, i.e. our plugins.\n\nI immediately fell in love with the paradigm of _each plugin is a React component_.\n\nThis let you build your plugins as extensible building blocks – just as regular components in React.\n\nA plugin can extend and customize the functionality of the editor, such as adding custom commands (which we will learn later on) or rendering toolbars (which we will learn too!).\n\nAs we can see, Lexical ships with pre-defined plugins, such as the `RichTextPlugin`. We can configure it with custom elements (e.g. placeholder) and get a working editor with just a few lines of code. It already provides a few handy utilities, like shortcuts to add text marks.\n\nAlthough before we try that, let’s add some styling. The editor config we passed into the `LexicalEditor` component accepts classes for each text node. Thus we can theme the editor.\n\n```tsx:Editor.tsx\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\n\ntype LexicalEditorProps = {\n  config: Parameters<typeof LexicalComposer>['0']['initialConfig'];\n};\n\nexport function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<Placeholder />}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n    </LexicalComposer>\n  );\n}\n\nconst Placeholder = () => {\n  return (\n    <div className=\"absolute top-[1.125rem] left-[1.125rem] opacity-50\">\n      Start writing...\n    </div>\n  );\n};\n\nexport function Editor() {\n  return (\n    <div\n      id=\"editor-wrapper\"\n      className={\n        'relative prose prose-slate prose-p:my-0 prose-headings:mb-4 prose-headings:mt-2'\n      }\n    >\n      <LexicalEditor\n        config={{\n          namespace: 'lexical-editor',\n          theme: {\n            root: 'p-4 border-slate-500 border-2 rounded h-full min-h-[200px] focus:outline-none focus-visible:border-black',\n            link: 'cursor-pointer',\n            text: {\n              bold: 'font-semibold',\n              underline: 'underline',\n              italic: 'italic',\n              strikethrough: 'line-through',\n              underlineStrikethrough: 'underlined-line-through',\n            },\n          },\n          onError: error => {\n            console.log(error);\n          },\n        }}\n      />\n    </div>\n  );\n}\n```\n\n<Callout>\n  Note: In our example, we use [tailwindui.com](http://tailwindui.com) to style\n  our editor. For the sake of simplicity, I don’t cover the styling part in this\n  article. If you want to follow along, take a look at the final repository to\n  see the Tailwind setup.\n</Callout>\n\nAnd with a few classes added, we get this pretty neatly looking editor:\n\n<Image\n  src=\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-nodes.png\"\n  alt=\"Lexical Setup\"\n/>\n\n## Deep Dive: How Lexical Works Internally\n\nAlbeit we use `LexicalComposer` to initiate our editor with React, Lexical doesn’t use React to render regular text nodes. It comes with its own renderer. This renderer is responsible for syncing state updates to the DOM. Hence, we can only use static classes to style those.\n\nIf we want to render editor nodes with React, and thus be able to render more complex components, we would need to create a so-called decorator node. This type of node can’t hold any text content and is kind of a black hole for Lexical.\n\nThe concept of an internal editor state object that acts as single source of truth and syncs updates with the DOM seems familiar compared to other text editor frameworks.\n\nLexical, however, utilizes another interesting concept. Instead of flushing changes directly to the actual DOM, it creates a virtual DOM first. If actual and virtual DOM differ, only the changed parts get marked as “dirty” and re-render. This is great news from a performance perspective!\n\n<Callout>\n  Note: Although the concept of a virtual DOM may be familiar to React\n  developers, Lexical and React do not share the same virtual DOM. The Lexical\n  editor creates its own based on its text nodes, while React creates its own\n  based on components that may be rendered by the editor.\n</Callout>\n\n## Editor State: Persisting Content In Local Storage\n\nNow that we have a bare minimum editor up and running, let’s extend it!\n\nAs mentioned, one of Lexical core concepts is its [editor state](https://lexical.dev/docs/concepts/editor-state) – the single source of truth that represents the editor content and the selection. If we type within the editor, each keystroke dispatches an update to the editor state.\n\nTo see how the editor state works in an application, we will write our first custom plugin that syncs the editor state with an external store. Thus, users don’t lose their content when they refresh the page.\n\nFor the sake of simplicity, I chose local storage for that. But it would work similarly with any other external store.\n\nAs mentioned before, each plugin is just a React component. Our `LocalStoragePlugin` looks like this:\n\n```tsx:plugins/LocalStorage.tsx\nimport { useCallback, useEffect } from 'react';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\n\nimport { debounce } from '../utils/debounce';\n\ntype LocalStoragePluginProps = {\n  namespace: string;\n};\n\nexport function LocalStoragePlugin({ namespace }: LocalStoragePluginProps) {\n  const [editor] = useLexicalComposerContext();\n\n  const saveContent = useCallback(\n    (content: string) => {\n      localStorage.setItem(namespace, content);\n    },\n    [namespace]\n  );\n\n  const debouncedSaveContent = debounce(saveContent, 500);\n\n  useEffect(() => {\n    return editor.registerUpdateListener(\n      ({ editorState, dirtyElements, dirtyLeaves }) => {\n        // Don't update if nothing changed\n        if (dirtyElements.size === 0 && dirtyLeaves.size === 0) return;\n\n        const serializedState = JSON.stringify(editorState);\n        debouncedSaveContent(serializedState);\n      }\n    );\n  }, [debouncedSaveContent, editor]);\n\n  return null;\n}\n```\n\nIn our newly created plugin, we get access to the editor instance by using the `useLexicalComposerContext` hook. Each plugin is nested within the root `LexicalEditorComposer` component, so we can simply access the editor instance like this.\n\nNext, we define a debounced callback that syncs content changes to the external store. Usually, this would the piece that updates your remote database.\n\nLastly, we create a `useEffect` hook that registers an update listener on the editor instance. In there, we can check if there are any _dirty_ elements that need to be synced with the state. If so, we call our debounced `saveContent` callback.\n\nNote that `editor.registerUpdateListener()` returns a callback to remove the update listener again. To avoid memory leaks, we use this returned callback for the cleanup function of `useEffect`.\n\nAs this plugin shouldn’t render any decoration or toolbar, we simply return `null` at the very end of the component.\n\nWith the plugin written, we can add it to our editor:\n\n```tsx:Editor.tsx\n...\n\nimport { LocalStoragePlugin } from \"./plugins/LocalStorage\";\n\n...\n\nexport function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<Placeholder />}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n      <LocalStoragePlugin namespace={props.config.namespace} />\n    </LexicalComposer>\n  );\n}\n\n...\n\nconst EDITOR_NAMESPACE = \"lexical-editor\";\n\nexport function Editor() {\n  const content = localStorage.getItem(EDITOR_NAMESPACE);\n\n  return (\n    <div\n      id=\"editor-wrapper\"\n      className={\n        \"relative prose prose-slate prose-p:my-0 prose-headings:mb-4 prose-headings:mt-2\"\n      }\n    >\n      <LexicalEditor\n        config={{\n          namespace: EDITOR_NAMESPACE,\n          editorState: content,\n          theme: {\n            root: \"p-4 border-slate-500 border-2 rounded h-full min-h-[200px] focus:outline-none focus-visible:border-black\",\n            link: \"cursor-pointer\",\n            text: {\n              bold: \"font-semibold\",\n              underline: \"underline\",\n              italic: \"italic\",\n              strikethrough: \"line-through\",\n              underlineStrikethrough: \"underlined-line-through\",\n            },\n          },\n          onError: (error) => {\n            console.log(error);\n          },\n        }}\n      />\n    </div>\n  );\n}\n```\n\nWe added two pieces:\n\n1. we inserted our `LocalStoragePlugin` as a child of the `LexicalComposer` component\n2. we retrieved the content from local storage in the `Editor` component\n\nIn this example, we used `EDITOR_NAMESPACE` as an identifier to store and retrieve our data. If `EDITOR_NAMESPACE` would be dynamic, e.g. an editor id, we could spin up several editors and store their data separately.\n\nWith that in place, we have extended our editor so that it stores our content safely in an external store, utilizing the concept of Lexical’s editor state. Now, let’s move on to the next important part of Lexical!\n\n## Nodes: Adding Headings And More Text Elements\n\nAnother foundational concept are [nodes](https://lexical.dev/docs/concepts/nodes). Nodes are the building blocks of our editor content. We can define for each type of node how it should be displayed, how it should behave on certain interactions, and what type of content it may contain.\n\nThe `ParagraphNode`, for instance, is a simple node that the `LexicalRichTextPlugin` includes already. We could, however, define more advanced node types. A `DecoratorNode` can embed a React component, for example, which allows complex renderings.\n\nUltimately, nodes define our data model. Hence, we need to tell Lexical which nodes may occur in the editor. To do that, we can extend the editor config by passing in an array of possible nodes.\n\nBut before, we need to install nodes Lexical does not automatically ship with:\n\n```bash\nnpm install --legacy-peer-deps @lexical/list @lexical/link @lexical/code\n```\n\nWith that, we can import each node from its respective package and pass it to the editor configuration:\n\n```tsx:Editor.tsx\nimport { HeadingNode, QuoteNode } from \"@lexical/rich-text\";\nimport { ListNode, ListItemNode } from \"@lexical/list\";\nimport { LinkNode } from \"@lexical/link\";\nimport { CodeNode } from \"@lexical/code\";\n\n...\n\nconst EDITOR_NODES = [\n  CodeNode,\n  HeadingNode,\n  LinkNode,\n  ListNode,\n  ListItemNode,\n  QuoteNode,\n];\n\n...\n\nexport function Editor() {\n  const content = localStorage.getItem(EDITOR_NAMESPACE);\n\n  return (\n    <div\n      id=\"editor-wrapper\"\n      className={\n        \"relative prose prose-slate prose-p:my-0 prose-headings:mb-4 prose-headings:mt-2\"\n      }\n    >\n      <LexicalEditor\n        config={{\n          namespace: EDITOR_NAMESPACE,\n          editorState: content,\n          nodes: EDITOR_NODES,\n          theme: {\n            root: \"p-4 border-slate-500 border-2 rounded h-full min-h-[200px] focus:outline-none focus-visible:border-black\",\n            link: \"cursor-pointer\",\n            text: {\n              bold: \"font-semibold\",\n              underline: \"underline\",\n              italic: \"italic\",\n              strikethrough: \"line-through\",\n              underlineStrikethrough: \"underlined-line-through\",\n            },\n          },\n          onError: (error) => {\n            console.log(error);\n          },\n        }}\n      />\n    </div>\n  );\n}\n```\n\nCool that was easy. Now that our editor can handle other node types, let’s add a way to create them!\n\n## Built-in Plugins: Adding Markdown Support\n\nMarkdown syntax allows us to easily create nodes of certain types. For example, typing \"_# My Lexical Editor_\" gets transformed into a heading with the title \"_My Lexical Editor_\".\n\nAdding Markdown capabilities to our editor is as simple as adding new nodes. Lexical provides a package for this too! So let’s add it by executing:\n\n```bash\nnpm install --legacy-peer-deps @lexical/markdown\n```\n\nThis package provides `TRANSFORMERS`. They configure how text input should be interpreted and handled.\n\nFor example, if the user’s text input matches the following regular expression `/^(#{1,6})\\s/`, it should turn the node into a heading node and remove the leading hashmark.\n\nThese `TRANSFORMERS` can be plugged into Lexical’s `MarkdownShortcutPlugin`. So we just need to embed the plugin in our `LexicalComposer` wrapper like this:\n\n```tsx:Editor.tsx\nimport { TRANSFORMERS } from \"@lexical/markdown\";\nimport { MarkdownShortcutPlugin } from \"@lexical/react/LexicalMarkdownShortcutPlugin\";\n\n...\n\nexport function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<Placeholder />}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n      <LocalStoragePlugin namespace={props.config.namespace} />\n      <MarkdownShortcutPlugin transformers={TRANSFORMERS} />\n    </LexicalComposer>\n  );\n}\n```\n\nThis gives us Markdown support with just a few lines of code. If you had custom node types which aren’t included in the default list of `TRANSFORMERS`, you could extend it as you like, of course.\n\n<Image\n  src=\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-nodes.png\"\n  alt=\"Lexical Nodes\"\n/>\n\nSo far, we got a basic WYSIWYG editor with just a few lines of code. Not bad, right?\n\nBy providing a lot of utilities, Lexical makes it easy to get something simple up and running very quickly. I like that a lot as it reduces boilerplate code and encourages best practices.\n\nBefore we wrap up this article, let’s improve our editor even further by adding a toolbar. Thus we get to know another core concept of Lexical’s internals: commands.\n\n## Custom Plugins: Creating An Actions Toolbar\n\n#### Writing Our First Command\n\nWe already learned what nodes – Lexical’s building blocks – are. To define how those building blocks react to certain interactions, we can create [commands](https://lexical.dev/docs/concepts/commands).\n\nA command is basically an event listener that holds a callback function. The function gets executed when the event occurs.\n\n```tsx\nconst CLEAR_EDITOR_COMMAND: LexicalCommand<undefined> = createCommand();\n\neditor.registerCommand(\n  CLEAR_EDITOR_COMMAND,\n  () => {\n    editor.update(() => {\n      const root = $getRoot();\n      const paragraph = $createParagraphNode();\n      root.clear();\n      root.append(paragraph);\n      paragraph.select();\n    });\n    return true;\n  },\n  LowPriority\n);\n\neditor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n```\n\nIn this example, we created a simple command that erases all editor content. We first need to run `createCommand()` and create a typed `CLEAR_EDITOR_COMMAND` variable that we can use throughout our application. With that, we can register a callback function that should run whenever the command gets dispatched.\n\nInside the callback function, we wrap our code inside `editor.update()`. Thus, we get access to the latest editor state tick and can use all $-prefixed helper functions (those are provided by Lexical itself).\n\nWe clear all content and return `true` to mark this event as handled. Thus, no other succeeding command handler is called.\n\nCommands are perfectly suited to create interactive elements such as toolbars. Since every WYSIWYG has one, let’s build our own too.\n\n#### Rendering A Toolbar Outside the Editor\n\nSince we already created a command that can clear the editor, we will start with a simple toolbar that has a button for exactly that.\n\n```tsx:plugins/Actions.tsx\nimport { useMemo } from 'react';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { ClearEditorPlugin } from '@lexical/react/LexicalClearEditorPlugin';\nimport { CLEAR_EDITOR_COMMAND } from 'lexical';\n\nimport { Button } from '../components/Button';\n\nexport function ActionsPlugin() {\n  const [editor] = useLexicalComposerContext();\n\n  const MandatoryPlugins = useMemo(() => {\n    return <ClearEditorPlugin />;\n  }, []);\n\n  return (\n    <>\n      {MandatoryPlugins}\n      <div className=\"my-4\">\n        <Button\n          onClick={() => {\n            editor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n          }}\n        >\n          {ActionIcons.Clear}\n        </Button>\n      </div>\n    </>\n  );\n}\n```\n\nOur new `ActionsPlugin` is fairly simple. We, again, get access to the editor by `LexicalComposerContext`. With that, we can later call the `CLEAR_EDITOR_COMMAND` on button click.\n\nOne note: as Lexical ships with its own `ClearEditorPlugin` for React applications, we use this instead our example we previously created. By returning `<ClearEditorPlugin />` as well as our toolbar decoration, we can include the functionality of the plugin in our editor.\n\nAs you see, the paradigm of _each plugin is a component_ makes it really easy to extend our editor. Whether it's custom functionality or a React-rendered toolbar, as long as we wrap it in the `LexicalComposer` container, it just works!\n\n```tsx:Editor.tsx\nexport function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<Placeholder />}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n      <LocalStoragePlugin namespace={props.config.namespace} />\n      <MarkdownShortcutPlugin transformers={TRANSFORMERS} />\n      <ActionsPlugin />\n    </LexicalComposer>\n  );\n}\n```\n\n<Image\n  src=\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-toolbar.png\"\n  alt=\"Lexical Toolbar\"\n/>\n\nWe now have our first toolbar button! Similarly, we could add more, e.g. to undo and redo changes.\n\nBut since we already covered a lot, let’s wrap things up for now. Though, there is a tiny tweak we can add to improve the experience.\n\n#### Registering A State Update Listener\n\nRight now, we can always clear the editor, even though there is no content. Let’s disable the button if the editor is empty. We can do so with this `useEffect` that runs on any change and checks if the editor has content or not.\n\n```tsx:plugins/Actions.tsx {3,6-27,34} showLineNumbers\nexport function ActionsPlugin() {\n  ...\n  const [isEditorEmpty, setIsEditorEmpty] = useState(true);\n\n  ...\n  useEffect(\n    function checkEditorEmptyState() {\n      return editor.registerUpdateListener(({ editorState }) => {\n        editorState.read(() => {\n          const root = $getRoot();\n          const children = root.getChildren();\n\n          if (children.length > 1) {\n            setIsEditorEmpty(false);\n            return;\n          }\n\n          if ($isParagraphNode(children[0])) {\n            setIsEditorEmpty(children[0].getChildren().length === 0);\n          } else {\n            setIsEditorEmpty(false);\n          }\n        });\n      });\n    },\n    [editor]\n  );\n\n  return (\n    <>\n      {MandatoryPlugins}\n      <div className=\"my-4\">\n        <Button\n          disabled={isEditorEmpty}\n          onClick={() => {\n            editor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n          }}\n        >\n          {ActionIcons.Clear}\n        </Button>\n      </div>\n    </>\n  );\n}\n```\n\nWith this change, we can pass the `isEditorEmpty` boolean to the button and display a disabled state:\n\n<Image\n  src=\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-toolbar-disabled.png\"\n  alt=\"Lexical Toolbar Disabled\"\n/>\n\n## Wrap Up\n\nIn this article, we did a lot! We went from knowing nothing about Lexical to building a simple WYSIWYG text editor. We covered foundational concepts of Lexical, such as editor state, nodes, commands, and how everything works hand in hand with React.\n\nHave fun extending the editor with even more functionality. I already created a version that has slightly more features, such as more toolbar actions and a floating menu.\n\n[🗳️ Github Repository](https://github.com/konstantinmuenster/lexical-rich-text-react-demo)\n\n[🛝 Live Demo](https://lexical-rich-text-react-demo.vercel.app/)\n\nFeel free to play with it. If you have questions or found a bug in the application, let me know on Twitter:\n\nI am always happy about feedback!\n\nIf you are interested in learning more about Lexical, check out the [documentation](https://lexical.dev) as well as its [Discord community](https://discord.gg/KmG4wQnnD9).\n",
    "code": "var Component=(()=>{var cn=Object.create;var A=Object.defineProperty;var un=Object.getOwnPropertyDescriptor;var mn=Object.getOwnPropertyNames;var fn=Object.getPrototypeOf,pn=Object.prototype.hasOwnProperty;var q=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),bn=(a,n)=>{for(var m in n)A(a,m,{get:n[m],enumerable:!0})},ye=(a,n,m,v)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let _ of mn(n))!pn.call(a,_)&&_!==m&&A(a,_,{get:()=>n[_],enumerable:!(v=un(n,_))||v.enumerable});return a};var hn=(a,n,m)=>(m=a!=null?cn(fn(a)):{},ye(n||!a||!a.__esModule?A(m,\"default\",{value:a,enumerable:!0}):m,a)),_n=a=>ye(A({},\"__esModule\",{value:!0}),a);var De=q((wn,we)=>{we.exports=React});var Ee=q(K=>{\"use strict\";(function(){\"use strict\";var a=De(),n=Symbol.for(\"react.element\"),m=Symbol.for(\"react.portal\"),v=Symbol.for(\"react.fragment\"),_=Symbol.for(\"react.strict_mode\"),y=Symbol.for(\"react.profiler\"),X=Symbol.for(\"react.provider\"),Q=Symbol.for(\"react.context\"),C=Symbol.for(\"react.forward_ref\"),M=Symbol.for(\"react.suspense\"),j=Symbol.for(\"react.suspense_list\"),k=Symbol.for(\"react.memo\"),W=Symbol.for(\"react.lazy\"),ke=Symbol.for(\"react.offscreen\"),J=Symbol.iterator,Le=\"@@iterator\";function Te(e){if(e===null||typeof e!=\"object\")return null;var r=J&&e[J]||e[Le];return typeof r==\"function\"?r:null}var w=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function p(e){{for(var r=arguments.length,i=new Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];Se(\"error\",e,i)}}function Se(e,r,i){{var o=w.ReactDebugCurrentFrame,d=o.getStackAddendum();d!==\"\"&&(r+=\"%s\",i=i.concat([d]));var c=i.map(function(s){return String(s)});c.unshift(\"Warning: \"+r),Function.prototype.apply.call(console[e],console,c)}}var Pe=!1,Oe=!1,Ae=!1,Ie=!1,Me=!1,Z;Z=Symbol.for(\"react.module.reference\");function je(e){return!!(typeof e==\"string\"||typeof e==\"function\"||e===v||e===y||Me||e===_||e===M||e===j||Ie||e===ke||Pe||Oe||Ae||typeof e==\"object\"&&e!==null&&(e.$$typeof===W||e.$$typeof===k||e.$$typeof===X||e.$$typeof===Q||e.$$typeof===C||e.$$typeof===Z||e.getModuleId!==void 0))}function We(e,r,i){var o=e.displayName;if(o)return o;var d=r.displayName||r.name||\"\";return d!==\"\"?i+\"(\"+d+\")\":i}function ee(e){return e.displayName||\"Context\"}function x(e){if(e==null)return null;if(typeof e.tag==\"number\"&&p(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"),typeof e==\"function\")return e.displayName||e.name||null;if(typeof e==\"string\")return e;switch(e){case v:return\"Fragment\";case m:return\"Portal\";case y:return\"Profiler\";case _:return\"StrictMode\";case M:return\"Suspense\";case j:return\"SuspenseList\"}if(typeof e==\"object\")switch(e.$$typeof){case Q:var r=e;return ee(r)+\".Consumer\";case X:var i=e;return ee(i._context)+\".Provider\";case C:return We(e,e.render,\"ForwardRef\");case k:var o=e.displayName||null;return o!==null?o:x(e.type)||\"Memo\";case W:{var d=e,c=d._payload,s=d._init;try{return x(s(c))}catch{return null}}}return null}var N=Object.assign,U=0,ne,te,re,ie,oe,le,se;function de(){}de.__reactDisabledLog=!0;function Fe(){{if(U===0){ne=console.log,te=console.info,re=console.warn,ie=console.error,oe=console.group,le=console.groupCollapsed,se=console.groupEnd;var e={configurable:!0,enumerable:!0,value:de,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}U++}}function Be(){{if(U--,U===0){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:N({},e,{value:ne}),info:N({},e,{value:te}),warn:N({},e,{value:re}),error:N({},e,{value:ie}),group:N({},e,{value:oe}),groupCollapsed:N({},e,{value:le}),groupEnd:N({},e,{value:se})})}U<0&&p(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}}var F=w.ReactCurrentDispatcher,B;function L(e,r,i){{if(B===void 0)try{throw Error()}catch(d){var o=d.stack.trim().match(/\\n( *(at )?)/);B=o&&o[1]||\"\"}return`\n`+B+e}}var Y=!1,T;{var Ye=typeof WeakMap==\"function\"?WeakMap:Map;T=new Ye}function ae(e,r){if(!e||Y)return\"\";{var i=T.get(e);if(i!==void 0)return i}var o;Y=!0;var d=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var c;c=F.current,F.current=null,Fe();try{if(r){var s=function(){throw Error()};if(Object.defineProperty(s.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(s,[])}catch(g){o=g}Reflect.construct(e,[],s)}else{try{s.call()}catch(g){o=g}e.call(s.prototype)}}else{try{throw Error()}catch(g){o=g}e()}}catch(g){if(g&&o&&typeof g.stack==\"string\"){for(var l=g.stack.split(`\n`),b=o.stack.split(`\n`),u=l.length-1,f=b.length-1;u>=1&&f>=0&&l[u]!==b[f];)f--;for(;u>=1&&f>=0;u--,f--)if(l[u]!==b[f]){if(u!==1||f!==1)do if(u--,f--,f<0||l[u]!==b[f]){var h=`\n`+l[u].replace(\" at new \",\" at \");return e.displayName&&h.includes(\"<anonymous>\")&&(h=h.replace(\"<anonymous>\",e.displayName)),typeof e==\"function\"&&T.set(e,h),h}while(u>=1&&f>=0);break}}}finally{Y=!1,F.current=c,Be(),Error.prepareStackTrace=d}var E=e?e.displayName||e.name:\"\",Ne=E?L(E):\"\";return typeof e==\"function\"&&T.set(e,Ne),Ne}function $e(e,r,i){return ae(e,!1)}function Ve(e){var r=e.prototype;return!!(r&&r.isReactComponent)}function S(e,r,i){if(e==null)return\"\";if(typeof e==\"function\")return ae(e,Ve(e));if(typeof e==\"string\")return L(e);switch(e){case M:return L(\"Suspense\");case j:return L(\"SuspenseList\")}if(typeof e==\"object\")switch(e.$$typeof){case C:return $e(e.render);case k:return S(e.type,r,i);case W:{var o=e,d=o._payload,c=o._init;try{return S(c(d),r,i)}catch{}}}return\"\"}var P=Object.prototype.hasOwnProperty,ce={},ue=w.ReactDebugCurrentFrame;function O(e){if(e){var r=e._owner,i=S(e.type,e._source,r?r.type:null);ue.setExtraStackFrame(i)}else ue.setExtraStackFrame(null)}function Ge(e,r,i,o,d){{var c=Function.call.bind(P);for(var s in e)if(c(e,s)){var l=void 0;try{if(typeof e[s]!=\"function\"){var b=Error((o||\"React class\")+\": \"+i+\" type `\"+s+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof e[s]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw b.name=\"Invariant Violation\",b}l=e[s](r,s,o,i,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(u){l=u}l&&!(l instanceof Error)&&(O(d),p(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",o||\"React class\",i,s,typeof l),O(null)),l instanceof Error&&!(l.message in ce)&&(ce[l.message]=!0,O(d),p(\"Failed %s type: %s\",i,l.message),O(null))}}}var ze=Array.isArray;function $(e){return ze(e)}function He(e){{var r=typeof Symbol==\"function\"&&Symbol.toStringTag,i=r&&e[Symbol.toStringTag]||e.constructor.name||\"Object\";return i}}function qe(e){try{return me(e),!1}catch{return!0}}function me(e){return\"\"+e}function fe(e){if(qe(e))return p(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\",He(e)),me(e)}var R=w.ReactCurrentOwner,Ke={key:!0,ref:!0,__self:!0,__source:!0},pe,be,V;V={};function Xe(e){if(P.call(e,\"ref\")){var r=Object.getOwnPropertyDescriptor(e,\"ref\").get;if(r&&r.isReactWarning)return!1}return e.ref!==void 0}function Qe(e){if(P.call(e,\"key\")){var r=Object.getOwnPropertyDescriptor(e,\"key\").get;if(r&&r.isReactWarning)return!1}return e.key!==void 0}function Je(e,r){if(typeof e.ref==\"string\"&&R.current&&r&&R.current.stateNode!==r){var i=x(R.current.type);V[i]||(p('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',x(R.current.type),e.ref),V[i]=!0)}}function Ze(e,r){{var i=function(){pe||(pe=!0,p(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",r))};i.isReactWarning=!0,Object.defineProperty(e,\"key\",{get:i,configurable:!0})}}function en(e,r){{var i=function(){be||(be=!0,p(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",r))};i.isReactWarning=!0,Object.defineProperty(e,\"ref\",{get:i,configurable:!0})}}var nn=function(e,r,i,o,d,c,s){var l={$$typeof:n,type:e,key:r,ref:i,props:s,_owner:c};return l._store={},Object.defineProperty(l._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(l,\"_self\",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(l,\"_source\",{configurable:!1,enumerable:!1,writable:!1,value:d}),Object.freeze&&(Object.freeze(l.props),Object.freeze(l)),l};function tn(e,r,i,o,d){{var c,s={},l=null,b=null;i!==void 0&&(fe(i),l=\"\"+i),Qe(r)&&(fe(r.key),l=\"\"+r.key),Xe(r)&&(b=r.ref,Je(r,d));for(c in r)P.call(r,c)&&!Ke.hasOwnProperty(c)&&(s[c]=r[c]);if(e&&e.defaultProps){var u=e.defaultProps;for(c in u)s[c]===void 0&&(s[c]=u[c])}if(l||b){var f=typeof e==\"function\"?e.displayName||e.name||\"Unknown\":e;l&&Ze(s,f),b&&en(s,f)}return nn(e,l,b,d,o,R.current,s)}}var G=w.ReactCurrentOwner,he=w.ReactDebugCurrentFrame;function D(e){if(e){var r=e._owner,i=S(e.type,e._source,r?r.type:null);he.setExtraStackFrame(i)}else he.setExtraStackFrame(null)}var z;z=!1;function H(e){return typeof e==\"object\"&&e!==null&&e.$$typeof===n}function _e(){{if(G.current){var e=x(G.current.type);if(e)return`\n\nCheck the render method of \\``+e+\"`.\"}return\"\"}}function rn(e){{if(e!==void 0){var r=e.fileName.replace(/^.*[\\\\\\/]/,\"\"),i=e.lineNumber;return`\n\nCheck your code at `+r+\":\"+i+\".\"}return\"\"}}var ve={};function on(e){{var r=_e();if(!r){var i=typeof e==\"string\"?e:e.displayName||e.name;i&&(r=`\n\nCheck the top-level render call using <`+i+\">.\")}return r}}function xe(e,r){{if(!e._store||e._store.validated||e.key!=null)return;e._store.validated=!0;var i=on(r);if(ve[i])return;ve[i]=!0;var o=\"\";e&&e._owner&&e._owner!==G.current&&(o=\" It was passed a child from \"+x(e._owner.type)+\".\"),D(e),p('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',i,o),D(null)}}function ge(e,r){{if(typeof e!=\"object\")return;if($(e))for(var i=0;i<e.length;i++){var o=e[i];H(o)&&xe(o,r)}else if(H(e))e._store&&(e._store.validated=!0);else if(e){var d=Te(e);if(typeof d==\"function\"&&d!==e.entries)for(var c=d.call(e),s;!(s=c.next()).done;)H(s.value)&&xe(s.value,r)}}}function ln(e){{var r=e.type;if(r==null||typeof r==\"string\")return;var i;if(typeof r==\"function\")i=r.propTypes;else if(typeof r==\"object\"&&(r.$$typeof===C||r.$$typeof===k))i=r.propTypes;else return;if(i){var o=x(r);Ge(i,e.props,\"prop\",o,e)}else if(r.PropTypes!==void 0&&!z){z=!0;var d=x(r);p(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\",d||\"Unknown\")}typeof r.getDefaultProps==\"function\"&&!r.getDefaultProps.isReactClassApproved&&p(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\")}}function sn(e){{for(var r=Object.keys(e.props),i=0;i<r.length;i++){var o=r[i];if(o!==\"children\"&&o!==\"key\"){D(e),p(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",o),D(null);break}}e.ref!==null&&(D(e),p(\"Invalid attribute `ref` supplied to `React.Fragment`.\"),D(null))}}function dn(e,r,i,o,d,c){{var s=je(e);if(!s){var l=\"\";(e===void 0||typeof e==\"object\"&&e!==null&&Object.keys(e).length===0)&&(l+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var b=rn(d);b?l+=b:l+=_e();var u;e===null?u=\"null\":$(e)?u=\"array\":e!==void 0&&e.$$typeof===n?(u=\"<\"+(x(e.type)||\"Unknown\")+\" />\",l=\" Did you accidentally export a JSX literal instead of a component?\"):u=typeof e,p(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",u,l)}var f=tn(e,r,i,d,c);if(f==null)return f;if(s){var h=r.children;if(h!==void 0)if(o)if($(h)){for(var E=0;E<h.length;E++)ge(h[E],e);Object.freeze&&Object.freeze(h)}else p(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");else ge(h,e)}return e===v?sn(f):ln(f),f}}var an=dn;K.Fragment=v,K.jsxDEV=an})()});var Re=q((En,Ue)=>{\"use strict\";Ue.exports=Ee()});var Nn={};bn(Nn,{default:()=>gn,frontmatter:()=>vn});var t=hn(Re()),vn={title:\"How To Build A Text Editor With Lexical and React\",summary:\"Lexical is a new framework for building rich text editors. Let's build a simple WYSIWYG editor with it.\",publishedAt:\"2023/01/10\",category:\"Engineering\",cover:{src:\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-text-editor-react-tutorial.png\",alt:\"Rich Text Editor with Lexical and React\",caption:\"Lexical integrates perfectly with React to build complex editor experiences.\"},tags:[\"Contenteditable\",\"Text Editor\",\"Rich Editor\",\"WYSIWYG\",\"Block Editor\",\"React.js\",\"Lexical\",\"Notion\"],externals:{Medium:\"https://konstantinmuenster.medium.com/how-to-build-a-text-editor-with-lexical-and-react-27204c186d0f\"}};function Ce(a){let n=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",span:\"span\",strong:\"strong\",code:\"code\",pre:\"pre\",em:\"em\",ol:\"ol\",li:\"li\",h4:\"h4\"},a.components),{Image:m,LearningPath:v,TargetAudience:_,Callout:y}=n;return y||I(\"Callout\",!0,\"164:1-169:11\"),m||I(\"Image\",!0,\"33:1-37:3\"),v||I(\"LearningPath\",!0,\"39:1-45:3\"),_||I(\"TargetAudience\",!0,\"47:1-49:18\"),(0,t.jsxDEV)(t.Fragment,{children:[(0,t.jsxDEV)(n.p,{children:[\"In April 2022, Meta open-sourced \",(0,t.jsxDEV)(n.a,{href:\"https://lexical.dev/\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"Lexical\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:25,columnNumber:34},this),\" \\u2013 \\u201Can extensible text editor framework\\u201D.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:25,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Given that it powers some of the most popular web apps in the world, it especially focuses on accessibility and performance. Among other things, by its native support for React 18.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:27,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"This caught my eye since a lot of text editing experiences are inherently inaccessible and struggle performance-wise as things get more complicated. Furthermore, Lexical adopted a lot of paradigms of React which makes it fairly easy to pick it up as a React developer (although it is framework agnostic).\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:29,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"So, I decided to give it a try and build a simple WYSIWYG editor with it.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:31,columnNumber:1},this),`\n`,(0,t.jsxDEV)(m,{src:\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-react-rich-text-demo.gif\",alt:\"Rich Text Editor with Lexical and React\",caption:\"WYSIWYG editor built with Lexical and React\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:33,columnNumber:1},this),`\n`,(0,t.jsxDEV)(v,{items:[\"Understanding Lexical\\u2019s foundational concepts (editor state, nodes, commands)\",\"Setting up an editor with Lexical and React\",\"Developing custom plugins\"]},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:39,columnNumber:1},this),`\n`,(0,t.jsxDEV)(_,{children:(0,t.jsxDEV)(n.p,{children:\"React developers with beginner or intermediate text editing experience\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:48,columnNumber:3},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:47,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"So, let's jump right into it!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:51,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h2,{id:\"how-to-setup-lexical-with-react\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#how-to-setup-lexical-with-react\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"How To Setup Lexical with React\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:53,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Lexical can be used with any framework of your choice \\u2013 or without a framework at all. It even offers a \",(0,t.jsxDEV)(n.strong,{children:(0,t.jsxDEV)(n.code,{children:\"@lexical/headless\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:55,columnNumber:107},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:55,columnNumber:105},this),\" package which lets you run the editor in a Node.js environment. This can come in handy sometimes (e.g. running Lexical on the server)!\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:55,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"In our example, however, we will use Lexical with React.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:57,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Setting up an editor with Lexical and React is fairly easy. First we need to install necessary packages:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:59,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-bash\",children:`npm i react react-dom lexical @lexical/react\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:61,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:61,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Lexical ships with a React-specific package (\",(0,t.jsxDEV)(n.code,{children:\"@lexical/react\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:65,columnNumber:46},this),\") that let you compose your first editor in just a breeze:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:65,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx:Editor.tsx\",children:`import { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\n\ntype LexicalEditorProps = {\n  config: Parameters<typeof LexicalComposer>['0']['initialConfig'];\n};\n\nexport function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<div>Start writing...</div>}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n    </LexicalComposer>\n  );\n}\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:67,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:67,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Each editor has a \",(0,t.jsxDEV)(n.code,{children:\"LexicalComposer\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:90,columnNumber:19},this),\" instance at the root. This root component internally executes Lexical\\u2019s \",(0,t.jsxDEV)(n.code,{children:\"createEditor\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:90,columnNumber:109},this),\" function and exposes the editor instance to its children, i.e. our plugins.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:90,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"I immediately fell in love with the paradigm of \",(0,t.jsxDEV)(n.em,{children:\"each plugin is a React component\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:92,columnNumber:49},this),\".\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:92,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"This let you build your plugins as extensible building blocks \\u2013 just as regular components in React.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:94,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"A plugin can extend and customize the functionality of the editor, such as adding custom commands (which we will learn later on) or rendering toolbars (which we will learn too!).\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:96,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"As we can see, Lexical ships with pre-defined plugins, such as the \",(0,t.jsxDEV)(n.code,{children:\"RichTextPlugin\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:98,columnNumber:68},this),\". We can configure it with custom elements (e.g. placeholder) and get a working editor with just a few lines of code. It already provides a few handy utilities, like shortcuts to add text marks.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:98,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Although before we try that, let\\u2019s add some styling. The editor config we passed into the \",(0,t.jsxDEV)(n.code,{children:\"LexicalEditor\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:100,columnNumber:91},this),\" component accepts classes for each text node. Thus we can theme the editor.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:100,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx:Editor.tsx\",children:`import { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\n\ntype LexicalEditorProps = {\n  config: Parameters<typeof LexicalComposer>['0']['initialConfig'];\n};\n\nexport function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<Placeholder />}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n    </LexicalComposer>\n  );\n}\n\nconst Placeholder = () => {\n  return (\n    <div className=\"absolute top-[1.125rem] left-[1.125rem] opacity-50\">\n      Start writing...\n    </div>\n  );\n};\n\nexport function Editor() {\n  return (\n    <div\n      id=\"editor-wrapper\"\n      className={\n        'relative prose prose-slate prose-p:my-0 prose-headings:mb-4 prose-headings:mt-2'\n      }\n    >\n      <LexicalEditor\n        config={{\n          namespace: 'lexical-editor',\n          theme: {\n            root: 'p-4 border-slate-500 border-2 rounded h-full min-h-[200px] focus:outline-none focus-visible:border-black',\n            link: 'cursor-pointer',\n            text: {\n              bold: 'font-semibold',\n              underline: 'underline',\n              italic: 'italic',\n              strikethrough: 'line-through',\n              underlineStrikethrough: 'underlined-line-through',\n            },\n          },\n          onError: error => {\n            console.log(error);\n          },\n        }}\n      />\n    </div>\n  );\n}\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:102,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:102,columnNumber:1},this),`\n`,(0,t.jsxDEV)(y,{children:(0,t.jsxDEV)(n.p,{children:[\"Note: In our example, we use \",(0,t.jsxDEV)(n.a,{href:\"http://tailwindui.com\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"tailwindui.com\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:165,columnNumber:32},this),` to style\nour editor. For the sake of simplicity, I don\\u2019t cover the styling part in this\narticle. If you want to follow along, take a look at the final repository to\nsee the Tailwind setup.`]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:165,columnNumber:3},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:164,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"And with a few classes added, we get this pretty neatly looking editor:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:171,columnNumber:1},this),`\n`,(0,t.jsxDEV)(m,{src:\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-nodes.png\",alt:\"Lexical Setup\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:173,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h2,{id:\"deep-dive-how-lexical-works-internally\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#deep-dive-how-lexical-works-internally\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"Deep Dive: How Lexical Works Internally\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:178,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Albeit we use \",(0,t.jsxDEV)(n.code,{children:\"LexicalComposer\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:180,columnNumber:15},this),\" to initiate our editor with React, Lexical doesn\\u2019t use React to render regular text nodes. It comes with its own renderer. This renderer is responsible for syncing state updates to the DOM. Hence, we can only use static classes to style those.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:180,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"If we want to render editor nodes with React, and thus be able to render more complex components, we would need to create a so-called decorator node. This type of node can\\u2019t hold any text content and is kind of a black hole for Lexical.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:182,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"The concept of an internal editor state object that acts as single source of truth and syncs updates with the DOM seems familiar compared to other text editor frameworks.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:184,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Lexical, however, utilizes another interesting concept. Instead of flushing changes directly to the actual DOM, it creates a virtual DOM first. If actual and virtual DOM differ, only the changed parts get marked as \\u201Cdirty\\u201D and re-render. This is great news from a performance perspective!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:186,columnNumber:1},this),`\n`,(0,t.jsxDEV)(y,{children:(0,t.jsxDEV)(n.p,{children:`Note: Although the concept of a virtual DOM may be familiar to React\ndevelopers, Lexical and React do not share the same virtual DOM. The Lexical\neditor creates its own based on its text nodes, while React creates its own\nbased on components that may be rendered by the editor.`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:189,columnNumber:3},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:188,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h2,{id:\"editor-state-persisting-content-in-local-storage\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#editor-state-persisting-content-in-local-storage\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"Editor State: Persisting Content In Local Storage\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:195,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Now that we have a bare minimum editor up and running, let\\u2019s extend it!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:197,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"As mentioned, one of Lexical core concepts is its \",(0,t.jsxDEV)(n.a,{href:\"https://lexical.dev/docs/concepts/editor-state\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"editor state\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:199,columnNumber:51},this),\" \\u2013 the single source of truth that represents the editor content and the selection. If we type within the editor, each keystroke dispatches an update to the editor state.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:199,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"To see how the editor state works in an application, we will write our first custom plugin that syncs the editor state with an external store. Thus, users don\\u2019t lose their content when they refresh the page.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:201,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"For the sake of simplicity, I chose local storage for that. But it would work similarly with any other external store.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:203,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"As mentioned before, each plugin is just a React component. Our \",(0,t.jsxDEV)(n.code,{children:\"LocalStoragePlugin\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:205,columnNumber:65},this),\" looks like this:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:205,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx:plugins/LocalStorage.tsx\",children:`import { useCallback, useEffect } from 'react';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\n\nimport { debounce } from '../utils/debounce';\n\ntype LocalStoragePluginProps = {\n  namespace: string;\n};\n\nexport function LocalStoragePlugin({ namespace }: LocalStoragePluginProps) {\n  const [editor] = useLexicalComposerContext();\n\n  const saveContent = useCallback(\n    (content: string) => {\n      localStorage.setItem(namespace, content);\n    },\n    [namespace]\n  );\n\n  const debouncedSaveContent = debounce(saveContent, 500);\n\n  useEffect(() => {\n    return editor.registerUpdateListener(\n      ({ editorState, dirtyElements, dirtyLeaves }) => {\n        // Don't update if nothing changed\n        if (dirtyElements.size === 0 && dirtyLeaves.size === 0) return;\n\n        const serializedState = JSON.stringify(editorState);\n        debouncedSaveContent(serializedState);\n      }\n    );\n  }, [debouncedSaveContent, editor]);\n\n  return null;\n}\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:207,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:207,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"In our newly created plugin, we get access to the editor instance by using the \",(0,t.jsxDEV)(n.code,{children:\"useLexicalComposerContext\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:245,columnNumber:80},this),\" hook. Each plugin is nested within the root \",(0,t.jsxDEV)(n.code,{children:\"LexicalEditorComposer\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:245,columnNumber:152},this),\" component, so we can simply access the editor instance like this.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:245,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Next, we define a debounced callback that syncs content changes to the external store. Usually, this would the piece that updates your remote database.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:247,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Lastly, we create a \",(0,t.jsxDEV)(n.code,{children:\"useEffect\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:249,columnNumber:21},this),\" hook that registers an update listener on the editor instance. In there, we can check if there are any \",(0,t.jsxDEV)(n.em,{children:\"dirty\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:249,columnNumber:136},this),\" elements that need to be synced with the state. If so, we call our debounced \",(0,t.jsxDEV)(n.code,{children:\"saveContent\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:249,columnNumber:221},this),\" callback.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:249,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Note that \",(0,t.jsxDEV)(n.code,{children:\"editor.registerUpdateListener()\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:251,columnNumber:11},this),\" returns a callback to remove the update listener again. To avoid memory leaks, we use this returned callback for the cleanup function of \",(0,t.jsxDEV)(n.code,{children:\"useEffect\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:251,columnNumber:182},this),\".\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:251,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"As this plugin shouldn\\u2019t render any decoration or toolbar, we simply return \",(0,t.jsxDEV)(n.code,{children:\"null\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:253,columnNumber:77},this),\" at the very end of the component.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:253,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"With the plugin written, we can add it to our editor:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:255,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx:Editor.tsx\",children:`...\n\nimport { LocalStoragePlugin } from \"./plugins/LocalStorage\";\n\n...\n\nexport function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<Placeholder />}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n      <LocalStoragePlugin namespace={props.config.namespace} />\n    </LexicalComposer>\n  );\n}\n\n...\n\nconst EDITOR_NAMESPACE = \"lexical-editor\";\n\nexport function Editor() {\n  const content = localStorage.getItem(EDITOR_NAMESPACE);\n\n  return (\n    <div\n      id=\"editor-wrapper\"\n      className={\n        \"relative prose prose-slate prose-p:my-0 prose-headings:mb-4 prose-headings:mt-2\"\n      }\n    >\n      <LexicalEditor\n        config={{\n          namespace: EDITOR_NAMESPACE,\n          editorState: content,\n          theme: {\n            root: \"p-4 border-slate-500 border-2 rounded h-full min-h-[200px] focus:outline-none focus-visible:border-black\",\n            link: \"cursor-pointer\",\n            text: {\n              bold: \"font-semibold\",\n              underline: \"underline\",\n              italic: \"italic\",\n              strikethrough: \"line-through\",\n              underlineStrikethrough: \"underlined-line-through\",\n            },\n          },\n          onError: (error) => {\n            console.log(error);\n          },\n        }}\n      />\n    </div>\n  );\n}\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:257,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:257,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"We added two pieces:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:316,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.ol,{children:[`\n`,(0,t.jsxDEV)(n.li,{children:[\"we inserted our \",(0,t.jsxDEV)(n.code,{children:\"LocalStoragePlugin\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:318,columnNumber:20},this),\" as a child of the \",(0,t.jsxDEV)(n.code,{children:\"LexicalComposer\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:318,columnNumber:59},this),\" component\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:318,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.li,{children:[\"we retrieved the content from local storage in the \",(0,t.jsxDEV)(n.code,{children:\"Editor\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:319,columnNumber:55},this),\" component\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:319,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:318,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"In this example, we used \",(0,t.jsxDEV)(n.code,{children:\"EDITOR_NAMESPACE\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:321,columnNumber:26},this),\" as an identifier to store and retrieve our data. If \",(0,t.jsxDEV)(n.code,{children:\"EDITOR_NAMESPACE\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:321,columnNumber:97},this),\" would be dynamic, e.g. an editor id, we could spin up several editors and store their data separately.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:321,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"With that in place, we have extended our editor so that it stores our content safely in an external store, utilizing the concept of Lexical\\u2019s editor state. Now, let\\u2019s move on to the next important part of Lexical!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:323,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h2,{id:\"nodes-adding-headings-and-more-text-elements\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#nodes-adding-headings-and-more-text-elements\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"Nodes: Adding Headings And More Text Elements\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:325,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Another foundational concept are \",(0,t.jsxDEV)(n.a,{href:\"https://lexical.dev/docs/concepts/nodes\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"nodes\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:327,columnNumber:34},this),\". Nodes are the building blocks of our editor content. We can define for each type of node how it should be displayed, how it should behave on certain interactions, and what type of content it may contain.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:327,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"The \",(0,t.jsxDEV)(n.code,{children:\"ParagraphNode\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:329,columnNumber:5},this),\", for instance, is a simple node that the \",(0,t.jsxDEV)(n.code,{children:\"LexicalRichTextPlugin\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:329,columnNumber:62},this),\" includes already. We could, however, define more advanced node types. A \",(0,t.jsxDEV)(n.code,{children:\"DecoratorNode\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:329,columnNumber:158},this),\" can embed a React component, for example, which allows complex renderings.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:329,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Ultimately, nodes define our data model. Hence, we need to tell Lexical which nodes may occur in the editor. To do that, we can extend the editor config by passing in an array of possible nodes.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:331,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"But before, we need to install nodes Lexical does not automatically ship with:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:333,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-bash\",children:`npm install --legacy-peer-deps @lexical/list @lexical/link @lexical/code\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:335,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:335,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"With that, we can import each node from its respective package and pass it to the editor configuration:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:339,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx:Editor.tsx\",children:`import { HeadingNode, QuoteNode } from \"@lexical/rich-text\";\nimport { ListNode, ListItemNode } from \"@lexical/list\";\nimport { LinkNode } from \"@lexical/link\";\nimport { CodeNode } from \"@lexical/code\";\n\n...\n\nconst EDITOR_NODES = [\n  CodeNode,\n  HeadingNode,\n  LinkNode,\n  ListNode,\n  ListItemNode,\n  QuoteNode,\n];\n\n...\n\nexport function Editor() {\n  const content = localStorage.getItem(EDITOR_NAMESPACE);\n\n  return (\n    <div\n      id=\"editor-wrapper\"\n      className={\n        \"relative prose prose-slate prose-p:my-0 prose-headings:mb-4 prose-headings:mt-2\"\n      }\n    >\n      <LexicalEditor\n        config={{\n          namespace: EDITOR_NAMESPACE,\n          editorState: content,\n          nodes: EDITOR_NODES,\n          theme: {\n            root: \"p-4 border-slate-500 border-2 rounded h-full min-h-[200px] focus:outline-none focus-visible:border-black\",\n            link: \"cursor-pointer\",\n            text: {\n              bold: \"font-semibold\",\n              underline: \"underline\",\n              italic: \"italic\",\n              strikethrough: \"line-through\",\n              underlineStrikethrough: \"underlined-line-through\",\n            },\n          },\n          onError: (error) => {\n            console.log(error);\n          },\n        }}\n      />\n    </div>\n  );\n}\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:341,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:341,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Cool that was easy. Now that our editor can handle other node types, let\\u2019s add a way to create them!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:396,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h2,{id:\"built-in-plugins-adding-markdown-support\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#built-in-plugins-adding-markdown-support\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"Built-in Plugins: Adding Markdown Support\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:398,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:['Markdown syntax allows us to easily create nodes of certain types. For example, typing \"',(0,t.jsxDEV)(n.em,{children:\"# My Lexical Editor\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:400,columnNumber:89},this),'\" gets transformed into a heading with the title \"',(0,t.jsxDEV)(n.em,{children:\"My Lexical Editor\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:400,columnNumber:160},this),'\".']},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:400,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Adding Markdown capabilities to our editor is as simple as adding new nodes. Lexical provides a package for this too! So let\\u2019s add it by executing:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:402,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-bash\",children:`npm install --legacy-peer-deps @lexical/markdown\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:404,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:404,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"This package provides \",(0,t.jsxDEV)(n.code,{children:\"TRANSFORMERS\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:408,columnNumber:23},this),\". They configure how text input should be interpreted and handled.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:408,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"For example, if the user\\u2019s text input matches the following regular expression \",(0,t.jsxDEV)(n.code,{children:\"/^(#{1,6})\\\\s/\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:410,columnNumber:80},this),\", it should turn the node into a heading node and remove the leading hashmark.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:410,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"These \",(0,t.jsxDEV)(n.code,{children:\"TRANSFORMERS\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:412,columnNumber:7},this),\" can be plugged into Lexical\\u2019s \",(0,t.jsxDEV)(n.code,{children:\"MarkdownShortcutPlugin\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:412,columnNumber:52},this),\". So we just need to embed the plugin in our \",(0,t.jsxDEV)(n.code,{children:\"LexicalComposer\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:412,columnNumber:121},this),\" wrapper like this:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:412,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx:Editor.tsx\",children:`import { TRANSFORMERS } from \"@lexical/markdown\";\nimport { MarkdownShortcutPlugin } from \"@lexical/react/LexicalMarkdownShortcutPlugin\";\n\n...\n\nexport function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<Placeholder />}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n      <LocalStoragePlugin namespace={props.config.namespace} />\n      <MarkdownShortcutPlugin transformers={TRANSFORMERS} />\n    </LexicalComposer>\n  );\n}\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:414,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:414,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"This gives us Markdown support with just a few lines of code. If you had custom node types which aren\\u2019t included in the default list of \",(0,t.jsxDEV)(n.code,{children:\"TRANSFORMERS\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:435,columnNumber:137},this),\", you could extend it as you like, of course.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:435,columnNumber:1},this),`\n`,(0,t.jsxDEV)(m,{src:\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-nodes.png\",alt:\"Lexical Nodes\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:437,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"So far, we got a basic WYSIWYG editor with just a few lines of code. Not bad, right?\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:442,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"By providing a lot of utilities, Lexical makes it easy to get something simple up and running very quickly. I like that a lot as it reduces boilerplate code and encourages best practices.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:444,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Before we wrap up this article, let\\u2019s improve our editor even further by adding a toolbar. Thus we get to know another core concept of Lexical\\u2019s internals: commands.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:446,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h2,{id:\"custom-plugins-creating-an-actions-toolbar\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#custom-plugins-creating-an-actions-toolbar\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"Custom Plugins: Creating An Actions Toolbar\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:448,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h4,{id:\"writing-our-first-command\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#writing-our-first-command\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"Writing Our First Command\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:450,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"We already learned what nodes \\u2013 Lexical\\u2019s building blocks \\u2013 are. To define how those building blocks react to certain interactions, we can create \",(0,t.jsxDEV)(n.a,{href:\"https://lexical.dev/docs/concepts/commands\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"commands\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:452,columnNumber:147},this),\".\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:452,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"A command is basically an event listener that holds a callback function. The function gets executed when the event occurs.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:454,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx\",children:`const CLEAR_EDITOR_COMMAND: LexicalCommand<undefined> = createCommand();\n\neditor.registerCommand(\n  CLEAR_EDITOR_COMMAND,\n  () => {\n    editor.update(() => {\n      const root = $getRoot();\n      const paragraph = $createParagraphNode();\n      root.clear();\n      root.append(paragraph);\n      paragraph.select();\n    });\n    return true;\n  },\n  LowPriority\n);\n\neditor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:456,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:456,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"In this example, we created a simple command that erases all editor content. We first need to run \",(0,t.jsxDEV)(n.code,{children:\"createCommand()\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:477,columnNumber:99},this),\" and create a typed \",(0,t.jsxDEV)(n.code,{children:\"CLEAR_EDITOR_COMMAND\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:477,columnNumber:136},this),\" variable that we can use throughout our application. With that, we can register a callback function that should run whenever the command gets dispatched.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:477,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Inside the callback function, we wrap our code inside \",(0,t.jsxDEV)(n.code,{children:\"editor.update()\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:479,columnNumber:55},this),\". Thus, we get access to the latest editor state tick and can use all $-prefixed helper functions (those are provided by Lexical itself).\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:479,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"We clear all content and return \",(0,t.jsxDEV)(n.code,{children:\"true\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:481,columnNumber:33},this),\" to mark this event as handled. Thus, no other succeeding command handler is called.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:481,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Commands are perfectly suited to create interactive elements such as toolbars. Since every WYSIWYG has one, let\\u2019s build our own too.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:483,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h4,{id:\"rendering-a-toolbar-outside-the-editor\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#rendering-a-toolbar-outside-the-editor\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"Rendering A Toolbar Outside the Editor\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:485,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Since we already created a command that can clear the editor, we will start with a simple toolbar that has a button for exactly that.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:487,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx:plugins/Actions.tsx\",children:`import { useMemo } from 'react';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { ClearEditorPlugin } from '@lexical/react/LexicalClearEditorPlugin';\nimport { CLEAR_EDITOR_COMMAND } from 'lexical';\n\nimport { Button } from '../components/Button';\n\nexport function ActionsPlugin() {\n  const [editor] = useLexicalComposerContext();\n\n  const MandatoryPlugins = useMemo(() => {\n    return <ClearEditorPlugin />;\n  }, []);\n\n  return (\n    <>\n      {MandatoryPlugins}\n      <div className=\"my-4\">\n        <Button\n          onClick={() => {\n            editor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n          }}\n        >\n          {ActionIcons.Clear}\n        </Button>\n      </div>\n    </>\n  );\n}\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:489,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:489,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Our new \",(0,t.jsxDEV)(n.code,{children:\"ActionsPlugin\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:521,columnNumber:9},this),\" is fairly simple. We, again, get access to the editor by \",(0,t.jsxDEV)(n.code,{children:\"LexicalComposerContext\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:521,columnNumber:82},this),\". With that, we can later call the \",(0,t.jsxDEV)(n.code,{children:\"CLEAR_EDITOR_COMMAND\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:521,columnNumber:141},this),\" on button click.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:521,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"One note: as Lexical ships with its own \",(0,t.jsxDEV)(n.code,{children:\"ClearEditorPlugin\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:523,columnNumber:41},this),\" for React applications, we use this instead our example we previously created. By returning \",(0,t.jsxDEV)(n.code,{children:\"<ClearEditorPlugin />\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:523,columnNumber:153},this),\" as well as our toolbar decoration, we can include the functionality of the plugin in our editor.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:523,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"As you see, the paradigm of \",(0,t.jsxDEV)(n.em,{children:\"each plugin is a component\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:525,columnNumber:29},this),\" makes it really easy to extend our editor. Whether it's custom functionality or a React-rendered toolbar, as long as we wrap it in the \",(0,t.jsxDEV)(n.code,{children:\"LexicalComposer\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:525,columnNumber:193},this),\" container, it just works!\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:525,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx:Editor.tsx\",children:`export function LexicalEditor(props: LexicalEditorProps) {\n  return (\n    <LexicalComposer initialConfig={props.config}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<Placeholder />}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n      <LocalStoragePlugin namespace={props.config.namespace} />\n      <MarkdownShortcutPlugin transformers={TRANSFORMERS} />\n      <ActionsPlugin />\n    </LexicalComposer>\n  );\n}\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:527,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:527,columnNumber:1},this),`\n`,(0,t.jsxDEV)(m,{src:\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-toolbar.png\",alt:\"Lexical Toolbar\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:544,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"We now have our first toolbar button! Similarly, we could add more, e.g. to undo and redo changes.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:549,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"But since we already covered a lot, let\\u2019s wrap things up for now. Though, there is a tiny tweak we can add to improve the experience.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:551,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h4,{id:\"registering-a-state-update-listener\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#registering-a-state-update-listener\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"Registering A State Update Listener\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:553,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"Right now, we can always clear the editor, even though there is no content. Let\\u2019s disable the button if the editor is empty. We can do so with this \",(0,t.jsxDEV)(n.code,{children:\"useEffect\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:555,columnNumber:149},this),\" that runs on any change and checks if the editor has content or not.\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:555,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.pre,{children:(0,t.jsxDEV)(n.code,{className:\"language-tsx:plugins/Actions.tsx\",children:`export function ActionsPlugin() {\n  ...\n  const [isEditorEmpty, setIsEditorEmpty] = useState(true);\n\n  ...\n  useEffect(\n    function checkEditorEmptyState() {\n      return editor.registerUpdateListener(({ editorState }) => {\n        editorState.read(() => {\n          const root = $getRoot();\n          const children = root.getChildren();\n\n          if (children.length > 1) {\n            setIsEditorEmpty(false);\n            return;\n          }\n\n          if ($isParagraphNode(children[0])) {\n            setIsEditorEmpty(children[0].getChildren().length === 0);\n          } else {\n            setIsEditorEmpty(false);\n          }\n        });\n      });\n    },\n    [editor]\n  );\n\n  return (\n    <>\n      {MandatoryPlugins}\n      <div className=\"my-4\">\n        <Button\n          disabled={isEditorEmpty}\n          onClick={() => {\n            editor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n          }}\n        >\n          {ActionIcons.Clear}\n        </Button>\n      </div>\n    </>\n  );\n}\n`},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:557,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:557,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"With this change, we can pass the \",(0,t.jsxDEV)(n.code,{children:\"isEditorEmpty\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:604,columnNumber:35},this),\" boolean to the button and display a disabled state:\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:604,columnNumber:1},this),`\n`,(0,t.jsxDEV)(m,{src:\"/images/posts/how-to-build-a-text-editor-with-lexical-and-react/lexical-toolbar-disabled.png\",alt:\"Lexical Toolbar Disabled\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:606,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.h2,{id:\"wrap-up\",children:[(0,t.jsxDEV)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#wrap-up\",children:(0,t.jsxDEV)(n.span,{className:\"icon icon-link\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this),\"Wrap Up\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:611,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"In this article, we did a lot! We went from knowing nothing about Lexical to building a simple WYSIWYG text editor. We covered foundational concepts of Lexical, such as editor state, nodes, commands, and how everything works hand in hand with React.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:613,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Have fun extending the editor with even more functionality. I already created a version that has slightly more features, such as more toolbar actions and a floating menu.\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:615,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:(0,t.jsxDEV)(n.a,{href:\"https://github.com/konstantinmuenster/lexical-rich-text-react-demo\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"\\u{1F5F3}\\uFE0F Github Repository\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:617,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:617,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:(0,t.jsxDEV)(n.a,{href:\"https://lexical-rich-text-react-demo.vercel.app/\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"\\u{1F6DD} Live Demo\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:619,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:619,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"Feel free to play with it. If you have questions or found a bug in the application, let me know on Twitter:\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:621,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:\"I am always happy about feedback!\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:623,columnNumber:1},this),`\n`,(0,t.jsxDEV)(n.p,{children:[\"If you are interested in learning more about Lexical, check out the \",(0,t.jsxDEV)(n.a,{href:\"https://lexical.dev\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"documentation\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:625,columnNumber:69},this),\" as well as its \",(0,t.jsxDEV)(n.a,{href:\"https://discord.gg/KmG4wQnnD9\",target:\"_blank\",rel:\"noopener noreferrer nofollow\",children:\"Discord community\"},void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:625,columnNumber:121},this),\".\"]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:625,columnNumber:1},this)]},void 0,!0,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\",lineNumber:1,columnNumber:1},this)}function xn(a={}){let{wrapper:n}=a.components||{};return n?(0,t.jsxDEV)(n,Object.assign({},a,{children:(0,t.jsxDEV)(Ce,a,void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this)}),void 0,!1,{fileName:\"/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx\"},this):Ce(a)}var gn=xn;function I(a,n,m){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(m?\"\\nIt\\u2019s referenced in your code at `\"+m+\"` in `/Users/evg/Documents/velolider/velolider/content/posts/_mdx_bundler_entry_point-7784a257-4940-462b-8814-e346e8833f3c.mdx`\":\"\"))}return _n(Nn);})();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n;return Component;"
  },
  "_id": "posts/008-how-to-build-a-text-editor-with-lexical-and-react.mdx",
  "_raw": {
    "sourceFilePath": "posts/008-how-to-build-a-text-editor-with-lexical-and-react.mdx",
    "sourceFileName": "008-how-to-build-a-text-editor-with-lexical-and-react.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/008-how-to-build-a-text-editor-with-lexical-and-react"
  },
  "type": "Post",
  "slug": "how-to-build-a-text-editor-with-lexical-and-react"
}