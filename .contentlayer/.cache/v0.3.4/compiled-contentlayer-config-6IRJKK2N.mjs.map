{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import remarkGfm from 'remark-gfm';\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeExternalLinks from 'rehype-external-links';\nimport {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from 'contentlayer/source-files';\n\n/**\n * GENERIC TYPES\n */\n\nconst Image = defineNestedType(() => ({\n  name: 'Image',\n  fields: {\n    src: { type: 'string', required: true },\n    alt: { type: 'string', required: true },\n    caption: { type: 'markdown' },\n  },\n}));\n\nconst Externals = defineNestedType(() => ({\n  name: 'Externals',\n  fields: {\n    Medium: { type: 'string' },\n    ProductHunt: { type: 'string' },\n    Website: { type: 'string' },\n  },\n}));\n\n/**\n * BLOG POSTS\n */\n\nconst POSTS_DIR_NAME = 'posts';\n\nconst Categories = ['\u042D\u043B\u0438\u0442\u0430', '\u041B\u0438\u0434\u0435\u0440\u044B', '\u041B\u0435\u0433\u0438\u043E\u043D\u0435\u0440\u044B', '\u041F\u0440\u043E\u0442\u043E\u043A\u043E\u043B\u044B', '\u041F\u0435\u0440\u0441\u043E\u043D\u0430\u043B', '\u041F\u0440\u043E\u0447\u0435\u0435', '\u0421\u043F\u043E\u043D\u0441\u043E\u0440\u044B'] as const;\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `./${POSTS_DIR_NAME}/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    publishedAt: { type: 'date', required: true },\n    summary: { type: 'string' },\n    cover: { type: 'nested', of: Image },\n    externals: { type: 'nested', of: Externals },\n    category: { type: 'enum', options: Categories },\n    tags: { type: 'list', of: { type: 'string' } },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: post => {\n        const name = post._raw.flattenedPath.split(`${POSTS_DIR_NAME}/`).pop();\n        const slug = name?.replace(/^(\\d{3})-/, '');\n        if (!slug) throw new Error(`Invalid file name: ${name}`);\n        return slug;\n      },\n    },\n  },\n}));\n\n/**\n * PROJECTS\n */\n\nconst PROJECTS_DIR_NAME = 'projects';\n\nconst Review = defineNestedType(() => ({\n  name: 'Review',\n  fields: {\n    biography: { type: 'string' },\n    summary: { type: 'markdown' },\n    avatar: { type: 'nested', of: Image },\n  },\n}));\n\nexport const Project = defineDocumentType(() => ({\n  name: 'Project',\n  filePathPattern: `./${PROJECTS_DIR_NAME}/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    period: { type: 'string' },\n    subtitle: { type: 'string' },\n    cover: { type: 'nested', of: Image },\n    role: { type: 'string' },\n    space: { type: 'string' },\n    tags: { type: 'list', of: { type: 'string' } },\n    stack: { type: 'list', of: { type: 'string' } },\n    externals: { type: 'nested', of: Externals },\n    background: { type: 'markdown' },\n    carousel: { type: 'list', of: Image },\n    responsibilities: { type: 'list', of: { type: 'markdown' } },\n    achievements: { type: 'list', of: { type: 'markdown' } },\n    review: { type: 'nested', of: Review },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: post => {\n        const n = post._raw.flattenedPath.split(`${PROJECTS_DIR_NAME}/`).pop();\n        const slug = n?.replace(/^(\\d{3})-/, '');\n        if (!slug) throw new Error(`Invalid file name: ${name}`);\n        return slug;\n      },\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post, Project],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      [\n        rehypeExternalLinks,\n        { target: '_blank', rel: ['noopener', 'noreferrer', 'nofollow'] },\n      ],\n      rehypeSlug,\n      rehypeAutolinkHeadings,\n    ],\n  },\n});\n"],
  "mappings": "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",
  "names": ["name"]
}
